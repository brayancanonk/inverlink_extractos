{
  "createdAt": "2024-10-28T21:21:42.277Z",
  "updatedAt": "2025-06-18T17:44:54.818Z",
  "id": "dkVCflBehjwg5Bv6",
  "name": "Accounting Records v3 - 4. ReteICA",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appxDB6mSqj7XDzIC",
          "mode": "list",
          "cachedResultName": "InvoiceData",
          "cachedResultUrl": "https://airtable.com/appxDB6mSqj7XDzIC"
        },
        "table": {
          "__rl": true,
          "value": "tblPHIUqpr9gmLfZJ",
          "mode": "list",
          "cachedResultName": "AIModels_Prompts",
          "cachedResultUrl": "https://airtable.com/appxDB6mSqj7XDzIC/tblPHIUqpr9gmLfZJ"
        },
        "filterByFormula": "ActualProject = \"Accounting Records\"",
        "options": {},
        "sort": {
          "property": [
            {
              "field": "ID"
            }
          ]
        }
      },
      "id": "9dec3baa-8e16-4a72-a69c-7b9dbf52702b",
      "name": "AI_Variables",
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        180,
        0
      ],
      "executeOnce": true,
      "credentials": {
        "airtableTokenApi": {
          "id": "qt2DSN1Xi7hBivEb",
          "name": "Airtable Personal Access Token"
        }
      },
      "notes": "Parametrización modelos AI y Prompts"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "6928fa1b-8a42-41ac-8962-8a86b5e52b41",
      "name": "Parametrizacion ReteFuente",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        560,
        0
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "636743ae-91b3-42d6-8f1e-9fde1287c121",
              "name": "Items",
              "value": "={{ $('Webhook').item.json.body.Items }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "52e262b0-6e66-49f5-a28d-bc0e20f10816",
      "name": "Mapping Items",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        960,
        0
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "47b5e880-773a-4ae0-ab0a-1fe51c081b29",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "0570dfa8-00e4-4049-ba1e-4b6769ffa649",
      "name": "Webhook",
      "webhookId": "94651882-8d9b-4998-90b4-c4b54eb9aafe"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1660,
        -220
      ],
      "id": "34271e8d-138a-444c-898d-e959576e09d0",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "ReteICA_TAX",
        "returnAll": true,
        "filterType": "none"
      },
      "id": "e78a5f6f-c9a0-4293-9c24-1d808946d556",
      "name": "Tablas ReteICA",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        360,
        0
      ],
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "U4Lx0acH9rOsOwsN",
          "name": "Supabase InvoiceData"
        }
      },
      "notes": "Parametrización Retención en la Fuente"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aaf1aed6-347b-4119-a406-9c3f6dab2339",
              "name": "Parametros ReteFuente",
              "value": "={{ $json.data }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "616b5300-918c-46ca-9a36-afbe68034e65",
      "name": "Parametros ReteICA",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        760,
        0
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "InvoicesData",
        "filters": {
          "conditions": [
            {
              "keyName": "Invoice_uuid",
              "keyValue": "={{ $json.Items[0].Invoice_uuid }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1160,
        0
      ],
      "id": "30f7d7eb-9f3a-4a4b-af89-8eeba1396aad",
      "name": "InvoiceData",
      "credentials": {
        "supabaseApi": {
          "id": "U4Lx0acH9rOsOwsN",
          "name": "Supabase InvoiceData"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Param_Cliente",
        "filters": {
          "conditions": [
            {
              "keyName": "ReceiverParty_CompanyID",
              "keyValue": "={{ $json.ReceiverParty_CompanyID }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1360,
        0
      ],
      "id": "afb95899-f7f2-4a24-8b05-81438fd14058",
      "name": "Param_Cliente",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "U4Lx0acH9rOsOwsN",
          "name": "Supabase InvoiceData"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ff48ed37-384c-4afd-8fc7-fdb885dfaba4",
              "leftValue": "={{ $json.SenderParty_TaxLevelCode }}",
              "rightValue": "\"O-13\"",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1820,
        0
      ],
      "id": "71a0820f-5f6e-4c32-ab62-b74c8eaede55",
      "name": "Gran_contribuyente"
    },
    {
      "parameters": {
        "jsCode": "const factura = $json;\nconst ciudadRetencion = String(factura.SenderParty_CityID || '').trim();\nconst actividadEconomica = String(factura.ActividadEconomica || '').trim();\nconst baseGravable = Number(factura.LineExtensionAmount) || 0;\nconst umbralRetencion = 100000;\n\nconst errores = [];\nconst errorLog = {\n    Error_uuid: (typeof crypto !== 'undefined' && crypto.randomUUID) ? crypto.randomUUID() : (factura.Invoice_uuid || null),\n    ParentDocumentID: factura.ParentDocumentID || null,\n    IssueDate: factura.IssueDate || null,\n    SenderParty_RegistrationName: factura.SenderParty_RegistrationName || null,\n    SenderParty_CompanyID: factura.SenderParty_CompanyID || null,\n    ReceiverParty_RegistrationName: factura.ReceiverParty_RegistrationName || null,\n    ReceiverParty_CompanyID: factura.ReceiverParty_CompanyID || null,\n    FileName: factura.FileName || null,\n    CUFE: factura.CUFE || null,\n    \"Accounting_Records – Módulo\": \"ReteICA\"\n};\n\nif (!ciudadRetencion) errores.push(\"No se encontró la ciudad de retención.\");\nif (!actividadEconomica) errores.push(\"No se encontró actividad económica.\");\nif (!factura.Invoice_uuid) errores.push(\"No se encontró Invoice_uuid.\");\nif (!baseGravable) errores.push(\"No se encontró base gravable (LineExtensionAmount).\");\n\nconst tarifasReteICA = $items('Tablas ReteICA');\nif (!tarifasReteICA || tarifasReteICA.length === 0) {\n    errores.push(\"No se encontraron tarifas de ReteICA en la base de datos.\");\n}\n\nlet tarifaICA = 0;\nif (errores.length === 0) {\n    const tarifaEncontrada = tarifasReteICA.find(item => \n        String(item.json.Cod_Dane) === ciudadRetencion && \n        String(item.json.CIIU_Code) === actividadEconomica\n    );\n    if (tarifaEncontrada) {\n        tarifaICA = parseFloat(tarifaEncontrada.json.Tarifa) || 0;\n    } else {\n        errores.push(`No se encontró tarifa para ciudad ${ciudadRetencion} y actividad económica ${actividadEconomica}`);\n    }\n}\n\nif (errores.length === 0 && baseGravable < umbralRetencion) {\n    errores.push(`La base gravable (${baseGravable}) no cumple el umbral para aplicar ReteICA`);\n}\n\nif (errores.length > 0) {\n    return [{\n        json: {\n            ...factura,\n            Invoice_uuid: factura.Invoice_uuid || null,\n            ReteICA: 0,\n            AplicaReteICA: false,\n            Error: true,\n            ErrorMessages: errores,\n            // Mapping directo para tabla Error_log\n            Error_log: {\n                ...errorLog,\n                Error_Log: errores.join('; '),\n                Error_Date: (new Date()).toISOString()\n            }\n        }\n    }];\n}\n\nconst reteICA = baseGravable * tarifaICA;\n\nreturn [{\n    json: {\n        ...factura,\n        Invoice_uuid: factura.Invoice_uuid,\n        ReteICA: reteICA,\n        AplicaReteICA: true,\n        Error: false\n    }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        -260
      ],
      "id": "ed573a0c-f12f-461e-9d50-1adc572effaa",
      "name": "Calculo",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Accounting_Records",
        "filters": {
          "conditions": [
            {
              "keyName": "Invoice_uuid",
              "condition": "eq",
              "keyValue": "={{ $json.Invoice_uuid }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "ReteICA",
              "fieldValue": "={{ $json.ReteICA }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3060,
        -240
      ],
      "id": "1549a1f0-bf25-4446-8add-01b725ae72b3",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "U4Lx0acH9rOsOwsN",
          "name": "Supabase InvoiceData"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "085e9fe3-e1b9-47e3-b436-72d3b635ecd9",
              "leftValue": "={{$json.ExpenseType}}",
              "rightValue": "Services Received",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2220,
        20
      ],
      "id": "072b569d-dd75-4964-a146-4ae15393198a",
      "name": "Expensive_Type"
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos de la factura desde InvoiceData\nconst factura = $items('InvoiceData')[0].json;\n\n// Obtener datos del receptor desde Param_Cliente\nconst paramCliente = $items('Param_Cliente').find(item => item.json.ReceiverParty_CompanyID === factura.ReceiverParty_CompanyID);\n\nif (!paramCliente) {\n    throw new Error(`⚠️ No se encontró información del receptor en Param_Cliente para el NIT: ${factura.ReceiverParty_CompanyID}`);\n}\n\n// Validar si la factura tiene la información obligatoria\nif (!factura.ExpenseType || !factura.SenderParty_TaxLevelCode || !factura.SenderParty_CityID || !factura.SenderParty_CityName || !factura.Invoice_uuid) {\n    throw new Error(`⚠️ La factura con UUID ${factura.Invoice_uuid || \"Desconocido\"} no contiene toda la información requerida.`);\n}\n\n// Fusionar datos con Param_Cliente\nreturn [{ \n    json: { \n        ...paramCliente.json,\n        ExpenseType: factura.ExpenseType.trim(),\n        SenderParty_TaxLevelCode: factura.SenderParty_TaxLevelCode,\n        SenderParty_CityID: factura.SenderParty_CityID,\n        SenderParty_CityName: factura.SenderParty_CityName,\n        ReceiverParty_CityID: paramCliente.json.ReceiverParty_CityID,\n        ReceiverParty_CityName: paramCliente.json.ReceiverParty_CityName,\n        Invoice_uuid: factura.Invoice_uuid\n    } \n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2580,
        100
      ],
      "id": "a7918d47-866e-4167-9fc3-c96735e01c45",
      "name": "Validación_ciudad_producto"
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos de la factura desde InvoiceData\nconst factura = $items('InvoiceData')[0].json;\n\n// Obtener datos del receptor desde Param_Cliente\nconst paramCliente = $items('Param_Cliente').find(item => item.json.ReceiverParty_CompanyID === factura.ReceiverParty_CompanyID) || { json: {} };\n\n// Fusionar ambos JSON en un solo objeto\nreturn [{ \n    json: { \n        ...paramCliente.json,\n        ExpenseType: factura.ExpenseType ? factura.ExpenseType.trim() : \"Products\",\n        SenderParty_TaxLevelCode: factura.SenderParty_TaxLevelCode || \"No Disponible\",\n        SenderParty_CityID: factura.SenderParty_CityID || null,\n        SenderParty_CityName: factura.SenderParty_CityName || null,\n        ReceiverParty_CityID: paramCliente.json.ReceiverParty_CityID || null,\n        ReceiverParty_CityName: paramCliente.json.ReceiverParty_CityName || null,\n        Invoice_uuid: factura.Invoice_uuid || null\n    } \n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1640,
        0
      ],
      "id": "947093fc-cfdb-414d-b856-d9caea51dd57",
      "name": "Limpieza"
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos de la factura desde InvoiceData\nconst factura = $items('InvoiceData')[0].json;\n\n// Obtener datos del receptor desde Param_Cliente\nconst paramCliente = $items('Param_Cliente').find(item => item.json.ReceiverParty_CompanyID === factura.ReceiverParty_CompanyID);\n\nif (!paramCliente) {\n    throw new Error(`⚠️ No se encontró información del receptor en Param_Cliente para el NIT: ${factura.ReceiverParty_CompanyID}`);\n}\n\n// Validar si la factura tiene la información obligatoria\nif (!factura.ExpenseType || !factura.SenderParty_TaxLevelCode || !factura.SenderParty_CityID || !factura.SenderParty_CityName || !factura.Invoice_uuid) {\n    throw new Error(`⚠️ La factura con UUID ${factura.Invoice_uuid || \"Desconocido\"} no contiene toda la información requerida.`);\n}\n\n// Fusionar datos con Param_Cliente\nreturn [{ \n    json: { \n        ...paramCliente.json,\n        ExpenseType: factura.ExpenseType.trim(),\n        SenderParty_TaxLevelCode: factura.SenderParty_TaxLevelCode,\n        SenderParty_CityID: factura.SenderParty_CityID,\n        SenderParty_CityName: factura.SenderParty_CityName,\n        ReceiverParty_CityID: paramCliente.json.ReceiverParty_CityID,\n        ReceiverParty_CityName: paramCliente.json.ReceiverParty_CityName,\n        Invoice_uuid: factura.Invoice_uuid\n    } \n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2040,
        20
      ],
      "id": "b5ff9370-fa5c-4390-a779-1160a1944a51",
      "name": "Val_ExpenseType"
    },
    {
      "parameters": {
        "jsCode": "const factura = $json;\nconst errores = [];\n\nconst errorLog = {\n    Error_uuid: (typeof crypto !== 'undefined' && crypto.randomUUID) ? crypto.randomUUID() : (factura.Invoice_uuid || null),\n    ParentDocumentID: factura.ParentDocumentID || null,\n    IssueDate: factura.IssueDate || null,\n    SenderParty_RegistrationName: factura.SenderParty_RegistrationName || null,\n    SenderParty_CompanyID: factura.SenderParty_CompanyID || null,\n    ReceiverParty_RegistrationName: factura.ReceiverParty_RegistrationName || null,\n    ReceiverParty_CompanyID: factura.ReceiverParty_CompanyID || null,\n    FileName: factura.FileName || null,\n    CUFE: factura.CUFE || null,\n    \"Accounting_Records – Módulo\": \"ReteICA\"\n};\n\n// Validar datos obligatorios\nif (!factura.SenderParty_CityID || !factura.SenderParty_CityName)\n    errores.push(`No se puede determinar la ciudad de prestación del servicio para la factura ${factura.Invoice_uuid || \"Desconocido\"}. Se requiere validación manual.`);\n\nif (!factura.ReceiverParty_CompanyID)\n    errores.push(`No se encontró ReceiverParty_CompanyID en la factura ${factura.Invoice_uuid || \"Desconocido\"}`);\n\n// Buscar info cliente\nconst paramCliente = $items('Param_Cliente').find(item => item.json.ReceiverParty_CompanyID === factura.ReceiverParty_CompanyID);\nif (!paramCliente)\n    errores.push(`No se encontró información del receptor en Param_Cliente para el NIT: ${factura.ReceiverParty_CompanyID}`);\n\n// CIIU\nlet actividadEconomica = null;\nif (paramCliente) {\n    actividadEconomica = paramCliente.json.CIIU_1_Des || paramCliente.json.CIIU_2_Des || paramCliente.json.CIIU_3_Des || paramCliente.json.CIIU_4_Des;\n    if (!actividadEconomica)\n        errores.push(`No se encontró información de actividad económica en Param_Cliente para el NIT: ${factura.ReceiverParty_CompanyID}`);\n}\n\nlet ciudadesRegistradas = [];\nif (paramCliente) {\n    for (let i = 1; i <= 20; i++) {\n        if (paramCliente.json[`ICA_CityID_${i}`]) {\n            ciudadesRegistradas.push(paramCliente.json[`ICA_CityID_${i}`]);\n        }\n    }\n}\n\nlet declaraReteICA = false;\nif (factura.SenderParty_CityID && ciudadesRegistradas.length > 0)\n    declaraReteICA = ciudadesRegistradas.includes(factura.SenderParty_CityID);\n\nif (errores.length > 0) {\n    return [{\n        json: {\n            ...factura,\n            DeclaraReteICA: false,\n            ActividadEconomica: actividadEconomica || null,\n            Error: true,\n            ErrorMessages: errores,\n            Error_log: {\n                ...errorLog,\n                Error_Log: errores.join('; '),\n                Error_Date: (new Date()).toISOString()\n            }\n        }\n    }];\n}\n\nreturn [{\n    json: {\n        SenderParty_CityID: factura.SenderParty_CityID,\n        SenderParty_CityName: factura.SenderParty_CityName,\n        DeclaraReteICA: declaraReteICA,\n        ActividadEconomica: actividadEconomica,\n        Invoice_uuid: factura.Invoice_uuid,\n        Error: false\n    }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        -260
      ],
      "id": "5ef29ed9-2be5-4f70-b05e-25d0e4bac41c",
      "name": "Validación_ciudad_servicio",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "ALL DATA\n\nBases de datos necesarios para la correcta ejecición del flujo.",
        "height": 460,
        "width": 1560,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -40,
        -180
      ],
      "id": "b78db09a-9411-4bd4-8b6e-cd81c559dcfd",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "LIMPIEZA DE INFORMACIÓN Y VARIABLES",
        "height": 880,
        "width": 840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1560,
        -340
      ],
      "id": "5d316e32-d8fa-4f22-8f15-7e1e434271f1",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "tableId": "Error_Log",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "ParentDocumentID",
              "fieldValue": "={{ $json.Error_log.ParentDocumentID }}"
            },
            {
              "fieldId": "SenderParty_RegistrationName",
              "fieldValue": "={{ $json.Error_log.SenderParty_RegistrationName }}"
            },
            {
              "fieldId": "SenderParty_CompanyID",
              "fieldValue": "={{ $json.Error_log.SenderParty_CompanyID }}"
            },
            {
              "fieldId": "ReceiverParty_RegistrationName",
              "fieldValue": "={{ $json.Error_log.ReceiverParty_RegistrationName }"
            },
            {
              "fieldId": "ReceiverParty_CompanyID",
              "fieldValue": "={{ $json.Error_log.ReceiverParty_CompanyID }}"
            },
            {
              "fieldId": "FileName",
              "fieldValue": "={{ $json.Error_log.FileName }}"
            },
            {
              "fieldId": "Error_Log",
              "fieldValue": "={{ $json.Error_log.Error_Log }}"
            },
            {
              "fieldId": "CUFE",
              "fieldValue": "={{ $json.Error_log.CUFE }}"
            },
            {
              "fieldId": "IssueDate",
              "fieldValue": "={{ $json.Error_log.IssueDate }}"
            },
            {
              "fieldId": "Accounting_Records - Módulo",
              "fieldValue": "4. ReteICA"
            }
          ]
        }
      },
      "id": "a1d9c981-5a3f-4242-ae2f-778fa49a491d",
      "name": "Error_Log1",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2560,
        320
      ],
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "U4Lx0acH9rOsOwsN",
          "name": "Supabase InvoiceData"
        }
      }
    },
    {
      "parameters": {
        "content": "ACTUALIZACIÓN Y LIQUIDACIÓN DE RETEICA",
        "height": 880,
        "width": 840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2440,
        -340
      ],
      "id": "7e2dd655-9b94-4386-be98-64cceb488354",
      "name": "Sticky Note2"
    }
  ],
  "connections": {
    "AI_Variables": {
      "main": [
        [
          {
            "node": "Tablas ReteICA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parametrizacion ReteFuente": {
      "main": [
        [
          {
            "node": "Parametros ReteICA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapping Items": {
      "main": [
        [
          {
            "node": "InvoiceData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI_Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tablas ReteICA": {
      "main": [
        [
          {
            "node": "Parametrizacion ReteFuente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parametros ReteICA": {
      "main": [
        [
          {
            "node": "Mapping Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "InvoiceData": {
      "main": [
        [
          {
            "node": "Param_Cliente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Param_Cliente": {
      "main": [
        [
          {
            "node": "Limpieza",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gran_contribuyente": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Val_ExpenseType",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculo": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error_Log1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expensive_Type": {
      "main": [
        [
          {
            "node": "Validación_ciudad_servicio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validación_ciudad_producto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limpieza": {
      "main": [
        [
          {
            "node": "Gran_contribuyente",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación_ciudad_producto": {
      "main": [
        []
      ]
    },
    "Val_ExpenseType": {
      "main": [
        [
          {
            "node": "Expensive_Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validación_ciudad_servicio": {
      "main": [
        [
          {
            "node": "Calculo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error_Log1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error_Log1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "eb79d210-6815-45c7-877b-ae56fc306a14",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-02-04T13:55:27.606Z",
      "updatedAt": "2025-02-04T13:55:27.606Z",
      "id": "sFbVSiMOCzwy8ZoJ",
      "name": "Causacion"
    }
  ]
}
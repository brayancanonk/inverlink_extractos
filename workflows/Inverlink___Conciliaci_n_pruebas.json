{
  "createdAt": "2025-06-25T13:28:25.151Z",
  "updatedAt": "2025-07-15T14:56:44.626Z",
  "id": "ElyzfUlQGqbwXpq0",
  "name": "Inverlink - Conciliación pruebas",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -740,
        40
      ],
      "id": "53af8a84-16e3-4ab1-b203-b75217e993dc",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "resource": "worksheet",
        "operation": "readRows",
        "workbook": {
          "__rl": true,
          "value": "01HZVEXTIWP4G5HEI7J5DYASYQ46DK7OQC",
          "mode": "list",
          "cachedResultName": "Extractos",
          "cachedResultUrl": "https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1"
        },
        "worksheet": {
          "__rl": true,
          "value": "{00000000-0001-0000-0000-000000000000}",
          "mode": "list",
          "cachedResultName": "extractos",
          "cachedResultUrl": "https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=extractos!A1"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        -240,
        -100
      ],
      "id": "e180e3bc-5483-432e-b792-262e5433207e",
      "name": "DB Extractos",
      "notesInFlow": true,
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "UMjXt9SIb2Tb1XTc",
          "name": "Excel Inverlink"
        }
      },
      "notes": "Base de datos de extractos, se realiza la extracción de datos de las columnas de extractos."
    },
    {
      "parameters": {
        "jsCode": "const facturas = $items(\"Facturas\", 0).map(i => i.json.facturas).flat();\nconst extractos = $items(\"Extractos\", 0).map(i => i.json.extractos).flat();\n\nreturn [\n  {\n    json: {\n      facturas,\n      extractos\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        -300
      ],
      "id": "4e541b88-fd6f-40ea-b077-298350dc3835",
      "name": "Cruce"
    },
    {
      "parameters": {
        "content": "## validaciones\n- variables importantes [ Fecha, Valor, Descripción]\n- se debe validar el formato de la fecha ya que algunas veces se recibirá de la siguiente forma (45394), son los días a partir del 1 de enero de 1900\n- se debe tener los datos de USD o monedas internacionales para la conversión de un API\n- Agregar un estado de conciliado en el extracto, DB Extractos. Para hacer una validación si las facturas y extractos están conciliados no es necesario traerlos",
        "height": 240,
        "width": 680
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -560,
        -520
      ],
      "id": "506e1184-3a82-4434-a04b-26ecdd78db6d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "function cleanValor(valor) {\n    if (typeof valor !== 'string') valor = String(valor);\n    valor = valor.trim().replace(/\\$/g, '').replace(/\\s/g, '');\n    if (valor.includes(',')) {\n        valor = valor.replace(/\\./g, '').replace(',', '.');\n    } else if (valor.match(/[.]\\d{2}$/)) {\n        valor = valor.replace(/,/g, '');\n    }\n    const num = Number(valor);\n    return Math.abs(Math.trunc(num));\n}\n\nfunction formatFechaDDMMYYYY(fecha) {\n    if (!fecha || !fecha.match(/^\\d{4}-\\d{2}-\\d{2}$/)) return null;\n\n    const [y, m, d] = fecha.split('-');\n    return `${d}/${m}/${y}`;\n}\n\nfunction cleanFecha(fecha) {\n    if (fecha === null || fecha === undefined) return null;\n\n    // Si es un número de Excel\n    if (!isNaN(fecha) && typeof fecha !== 'string') {\n        const baseDate = new Date(1900, 0, 1);\n        baseDate.setDate(baseDate.getDate() + Number(fecha) - 1); // <- corregido\n        return baseDate.toISOString().split('T')[0]; // yyyy-mm-dd\n    }\n\n    fecha = String(fecha).trim();\n\n    // Caso: \"dd/mm\" sin año\n    if (fecha.match(/^(\\d{1,2})\\/(\\d{1,2})$/)) {\n        let [_, d, m] = fecha.match(/^(\\d{1,2})\\/(\\d{1,2})$/);\n        let y = new Date().getFullYear(); // Asume año actual\n        return `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\n    }\n\n    // Caso: \"dd/mm/yyyy\"\n    if (fecha.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{2,4})$/)) {\n        let [_, d, m, y] = fecha.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{2,4})$/);\n        if (y.length === 2) y = '20' + y;\n        return `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\n    }\n\n    return fecha;\n}\n\nlet extractos = items.map(e => {\n    const fechaISO = cleanFecha(e.json['Fecha (Día/Mes)']);\n\n    return {\n        descripcion: e.json['Descripción'] || '',\n        empresa: e.json['Banco'] || '',\n        referencia: e.json['No de Compte'] || e.json['Tarjeta (últimos dígitos)'] || '',\n        fecha_fact: formatFechaDDMMYYYY(fechaISO),\n        //fecha_formato_largo: fechaISO,\n        monto_fact: cleanValor(e.json['Valor Compra'] || e.json['Cargos y Abonos']),\n        moneda: 'COP',\n        URL: e.json['Url extracto'] || '',\n    };\n});\n\nreturn [\n    {\n        json: {\n            extractos: extractos\n        }\n    }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -40,
        -100
      ],
      "id": "458c9951-10e4-4abb-8961-e06f5a74ca4d",
      "name": "Extractos",
      "notes": "Se realiza el ajuste y validación de la información de los extractos y se cargan en una sola lista"
    },
    {
      "parameters": {
        "jsCode": "function cleanValor(valor) {\n    if (typeof valor !== 'string') valor = String(valor);\n    valor = valor.trim().replace(/\\$/g, '').replace(/\\s/g, '');\n    if (valor.includes(',')) {\n        valor = valor.replace(/\\./g, '').replace(',', '.');\n    } else if (valor.match(/[.]\\d{2}$/)) {\n        valor = valor.replace(/,/g, '');\n    }\n    const num = Number(valor);\n    return Math.abs(Math.trunc(num));\n}\n\nfunction cleanFecha(fecha) {\n    if (fecha === null || fecha === undefined) return null;\n\n    // Si es un número de Excel (ej: 45394)\n    if (!isNaN(fecha) && typeof fecha !== 'string') {\n        const baseDate = new Date(1900, 0, 1);\n        baseDate.setDate(baseDate.getDate() + Number(fecha) - 2); // <- corregido aquí\n        const day = baseDate.getDate().toString().padStart(2, '0');\n        const month = (baseDate.getMonth() + 1).toString().padStart(2, '0');\n        const year = baseDate.getFullYear();\n        return `${day}/${month}/${year}`;\n    }\n\n    // Si es string (tipo \"4/12/2024\")\n    fecha = String(fecha).trim();\n    if (fecha.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{2,4})$/)) {\n        let [_, d, m, y] = fecha.match(/^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{2,4})$/);\n        if (y.length === 2) y = '20' + y;\n        return `${d.padStart(2, '0')}/${m.padStart(2, '0')}/${y}`;\n    }\n\n    return fecha;\n}\n\nlet facturas = items.map(e => {\n    return {\n        descripcion: e.json['Descripción'] || '',\n        empresa: e.json['Empresa emisora'] || '',\n        referencia: e.json['Número de comprobante o referencia'] || '',\n        fecha_fact: cleanFecha(e.json['Fecha de pago o compra']),\n        monto_fact: cleanValor(e.json['Monto total cobrado']),\n        moneda: e.json['Moneda'] || 'COP',\n        URL: e.json['Url factura']\n    };\n});\n\nreturn [\n    {\n        json: {\n            facturas: facturas\n        }\n    }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -20,
        100
      ],
      "id": "c9faf833-7d90-41d6-89cd-9a677620d496",
      "name": "Facturas",
      "notes": "Se realiza el ajuste y validación de la información de las facturas "
    },
    {
      "parameters": {
        "jsCode": "const entrada = $input.item.json;\n\nfunction parseFecha(fechaStr) {\n  if (!fechaStr) return null;\n  const [day, month, year] = fechaStr.split('/');\n  return new Date(`${year}-${month}-${day}`);\n}\n\nfunction fechasCercanas(fecha1, fecha2, margenDias = 3) {\n  if (!fecha1 || !fecha2) return false;\n  const diff = Math.abs(fecha1 - fecha2);\n  return diff <= margenDias * 86400000;\n}\n\nfunction normalizarTexto(texto) {\n  return texto?.toLowerCase()\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9]/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim() || '';\n}\n\nconst extractos = entrada.extractos.filter(e => e.monto_fact > 0);\nconst facturas = entrada.facturas.filter(f => f.monto_fact > 0);\n\nconst conciliados = [];\nconst facturasPendientes = [];\nconst extractosSinConciliar = [];\n\nconst usadosExtractos = new Set();\n\nfor (const factura of facturas) {\n  const fechaFactura = parseFecha(factura.fecha_fact);\n  const montoFactura = factura.monto_fact;\n  const descFactura = normalizarTexto(factura.descripcion);\n  const empresaFactura = normalizarTexto(factura.empresa);\n\n  let matchIndex = -1;\n\n  for (let i = 0; i < extractos.length; i++) {\n    if (usadosExtractos.has(i)) continue;\n\n    const extr = extractos[i];\n    const fechaExtracto = parseFecha(extr.fecha_fact);\n    const montoExtracto = extr.monto_fact;\n    const descExtracto = normalizarTexto(extr.descripcion);\n\n    const montoIgual = montoFactura === montoExtracto;\n    const fechaSimilar = fechasCercanas(fechaFactura, fechaExtracto);\n    const descripcionRelacionada =\n      (descExtracto.includes('uber') && empresaFactura.includes('uber')) ||\n      (descExtracto.includes('cabify') && empresaFactura.includes('cabify')) ||\n      descExtracto.includes(normalizarTexto(factura.empresa));\n\n    if (montoIgual && fechaSimilar && descripcionRelacionada) {\n      matchIndex = i;\n      break;\n    }\n  }\n\n  if (matchIndex >= 0) {\n    usadosExtractos.add(matchIndex);\n    conciliados.push({\n      factura,\n      extracto: extractos[matchIndex]\n    });\n  } else {\n    facturasPendientes.push(factura);\n  }\n}\n\n// Cargar extractos no usados\nextractos.forEach((e, i) => {\n  if (!usadosExtractos.has(i)) extractosSinConciliar.push(e);\n});\n\nreturn [\n  { json: { conciliados } },\n  { json: { facturasPendientes } },\n  { json: { extractosSinConciliar } }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        -300
      ],
      "id": "d4f81d52-7fe0-493e-8a6c-a21b6bc8813b",
      "name": "Unir"
    },
    {
      "parameters": {
        "resource": "worksheet",
        "operation": "append",
        "workbook": {
          "__rl": true,
          "value": "01HZVEXTIWP4G5HEI7J5DYASYQ46DK7OQC",
          "mode": "list",
          "cachedResultName": "Extractos",
          "cachedResultUrl": "https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1"
        },
        "worksheet": {
          "__rl": true,
          "value": "{5E9DF66E-126B-40A3-9DE4-62E109BBB106}",
          "mode": "list",
          "cachedResultName": "Conciliados",
          "cachedResultUrl": "https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=Conciliados!A1"
        },
        "fieldsUi": {
          "values": [
            {
              "column": "Descripción factura",
              "fieldValue": "={{ $json.factura_descripcion }}"
            },
            {
              "column": "Valor factura",
              "fieldValue": "={{ $json.factura_valor }}"
            },
            {
              "column": "Fecha factura",
              "fieldValue": "={{ $json.factura_fecha }}"
            },
            {
              "column": "Descripción extracto",
              "fieldValue": "={{ $json.extracto_descripcion }}"
            },
            {
              "column": "Valor extracto",
              "fieldValue": "={{ $json.extracto_valor }}"
            },
            {
              "column": "Fecha extracto",
              "fieldValue": "={{ $json.extracto_fecha }}"
            },
            {
              "column": "Estado",
              "fieldValue": "={{ $json.estado }}"
            },
            {
              "column": "Empresa emisora",
              "fieldValue": "={{ $json.factura_empresa }}"
            },
            {
              "column": "Empresa extracto",
              "fieldValue": "={{ $json.extracto_empresa }}"
            },
            {
              "column": "Url factura",
              "fieldValue": "={{ $json.factura_url }}"
            },
            {
              "column": "Url extracto",
              "fieldValue": "={{ $json.extracto_url }}"
            },
            {
              "column": "Fecha conciliado",
              "fieldValue": "={{ $now.setLocale('es').toFormat('dd/LL/yyyy') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        780,
        40
      ],
      "id": "1ba22dd7-3c77-459c-bd59-0002e1490c11",
      "name": "consolidados procesados",
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "UMjXt9SIb2Tb1XTc",
          "name": "Excel Inverlink"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = items.map(item => item.json);\n\n// Si los datos vienen en tres objetos separados\nconst conciliados = data.find(d => d.conciliados)?.conciliados || [];\n\nconsole.log(conciliados);\n//return conciliados;\n\n// Conciliados\n\n  const conciliadosMap = conciliados.map(item => ({\n    factura_descripcion: item.factura.descripcion,\n    factura_empresa: item.factura.empresa,\n    factura_valor: item.factura.monto_fact,\n    factura_fecha: item.factura.fecha_fact,\n    factura_url: item.factura.URL,\n    extracto_descripcion: item.extracto.descripcion,\n    extracto_empresa: item.extracto.empresa,\n    extracto_valor: item.extracto.monto_fact,\n    extracto_fecha: item.extracto.fecha_fact,\n    extracto_url: item.extracto.URL,\n    estado: item.estado,\n    fechaconciliado: item.fechaconciliado\n    \n  }))\n\nreturn conciliadosMap"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        40
      ],
      "id": "3c54eeda-bd92-4d4b-b868-e25a62e0c58c",
      "name": "retorno conciliados",
      "notes": "Se realiza un retorno de las facturas y extractos conciliados en una lista"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "bwp4fSY7Kisusg8w",
          "mode": "list",
          "cachedResultName": "Inverlink - carga conciliados"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        980,
        40
      ],
      "id": "f943a7c8-2424-450f-b798-babfba6e6fed",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7002c6c1-cc7a-40df-9236-b56f4e83518d",
              "leftValue": "={{ $json['Estado conciliado'] }}",
              "rightValue": "Conciliado OK",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -240,
        80
      ],
      "id": "5a976c28-64dc-4ee8-9b59-3c298cb68805",
      "name": "If"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        200,
        40
      ],
      "id": "6d2ebe53-8af7-4c89-ae72-e48b31c4df5f",
      "name": "Merge",
      "notes": "Se realiza la unión de ambas listas para la conciliación"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -60,
        280
      ],
      "id": "d7aa00cf-84ac-4ddc-8b09-8f8065331627",
      "name": "Facturas conciliadas"
    },
    {
      "parameters": {
        "jsCode": "const MATCH_DAYS = 3;     // Aumentar días para mayor flexibilidad\nconst MATCH_TOL = 5000;  // Aumentar tolerancia para manejar diferencias de formato\n\n// Tasas de cambio aproximadas\nconst USD_TO_COP = 4380;\n\n// Función auxiliar para normalizar fechas\nfunction normalizarFecha(fecha, esExtracto = false) {\n  if (!fecha) return null;\n  \n  // Si es string de fecha completa\n  if (typeof fecha === 'string') {\n    // Formato DD/MM/YYYY\n    if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(fecha)) {\n      const [dia, mes, ano] = fecha.split('/');\n      const fechaCompleta = `${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;\n      const fechaObj = new Date(fechaCompleta);\n      return isNaN(fechaObj.getTime()) ? null : fechaObj;\n    }\n    \n    // Formato DD/MM sin año (para extractos)\n    if (esExtracto && /^\\d{1,2}\\/\\d{1,2}$/.test(fecha)) {\n      const [dia, mes] = fecha.split('/');\n      const fechaCompleta = `2024-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;\n      const fechaObj = new Date(fechaCompleta);\n      return isNaN(fechaObj.getTime()) ? null : fechaObj;\n    }\n  }\n  \n  // Para otros formatos (ISO, etc.)\n  const fechaObj = new Date(fecha);\n  return isNaN(fechaObj.getTime()) ? null : fechaObj;\n}\n\n// Función auxiliar para normalizar valores numéricos - SIMPLIFICADA\nfunction normalizarMonto(monto, moneda = 'COP') {\n  if (monto === null || monto === undefined || monto === '') return 0;\n  \n  // Si ya es número, convertir directamente\n  if (typeof monto === 'number') {\n    const valorCOP = moneda === 'USD' ? monto * USD_TO_COP : monto;\n    return Math.abs(valorCOP);\n  }\n  \n  // Convertir a string y limpiar\n  let numeroStr = monto.toString();\n  \n  // Eliminar espacios\n  numeroStr = numeroStr.replace(/\\s/g, '');\n  \n  // Si contiene comas, reemplazar por puntos para decimal\n  if (numeroStr.includes(',')) {\n    // Caso: 1.234.567,89 -> 1234567.89\n    if (numeroStr.includes('.') && numeroStr.includes(',')) {\n      numeroStr = numeroStr.replace(/\\./g, '').replace(',', '.');\n    } else {\n      // Caso: 1234,89 -> 1234.89\n      numeroStr = numeroStr.replace(',', '.');\n    }\n  }\n  \n  // Eliminar puntos que son separadores de miles\n  const partes = numeroStr.split('.');\n  if (partes.length > 2) {\n    // Múltiples puntos = separadores de miles\n    numeroStr = partes.slice(0, -1).join('') + '.' + partes[partes.length - 1];\n  } else if (partes.length === 2 && partes[1].length > 2) {\n    // Punto como separador de miles\n    numeroStr = numeroStr.replace(/\\./g, '');\n  }\n  \n  const numero = parseFloat(numeroStr);\n  \n  if (isNaN(numero)) {\n    console.warn(`⚠️  No se pudo parsear el monto: \"${monto}\" -> \"${numeroStr}\"`);\n    return 0;\n  }\n  \n  const valorCOP = moneda === 'USD' ? numero * USD_TO_COP : numero;\n  return Math.abs(valorCOP);\n}\n\n// Función auxiliar para comparar empresas/descripciones - SIMPLIFICADA Y MÁS FLEXIBLE\nfunction compararEmpresa(factura, extracto) {\n  const empresaFac = (factura.empresa || factura.descripcion || '').toLowerCase().trim();\n  const descExtracto = (extracto.descripcion || '').toLowerCase().trim();\n  \n  // Si alguno está vacío, no se puede comparar\n  if (!empresaFac || !descExtracto) {\n    console.log(`    ❌ Uno de los campos está vacío`);\n    return false;\n  }\n  \n  // Limpiar y normalizar texto\n  const limpiarTexto = (texto) => {\n    return texto\n      .replace(/[^\\w\\s]/g, ' ')  // Reemplazar caracteres especiales con espacios\n      .replace(/\\s+/g, ' ')      // Múltiples espacios -> uno solo\n      .trim();\n  };\n  \n  const facturaNorm = limpiarTexto(empresaFac);\n  const extractoNorm = limpiarTexto(descExtracto);\n  \n  // 1. Coincidencia exacta (normalizada)\n  if (facturaNorm === extractoNorm) {\n    console.log(`    ✅ Match exacto`);\n    return true;\n  }\n  \n  // 2. Uno contiene al otro\n  if (facturaNorm.includes(extractoNorm) || extractoNorm.includes(facturaNorm)) {\n    console.log(`    ✅ Match por contención`);\n    return true;\n  }\n  \n  // 3. Mapeo específico de términos conocidos\n  const mapeoTerminos = {\n    'uber': ['uber', 'rides', 'viaje'],\n    'cabify': ['cabify', 'viaje'],\n    'spirit': ['spirit', 'airlines'],\n    'ceviche': ['ceviche', 'camaron'],\n    'centro': ['centro', 'che'],\n    'green': ['green', 'office'],\n    'step': ['step', 'ahead'],\n    'hotel': ['hotel', 'estelar'],\n    'clases': ['clases', 'personalizadas']\n  };\n  \n  for (const [termino, variantes] of Object.entries(mapeoTerminos)) {\n    const tieneFactura = variantes.some(v => facturaNorm.includes(v));\n    const tieneExtracto = variantes.some(v => extractoNorm.includes(v));\n    \n    if (tieneFactura && tieneExtracto) {\n      console.log(`    ✅ Match por mapeo de término: \"${termino}\"`);\n      return true;\n    }\n  }\n  \n  // 4. Coincidencia por palabras individuales\n  const palabrasFactura = facturaNorm.split(/\\s+/).filter(p => p.length > 2);\n  const palabrasExtracto = extractoNorm.split(/\\s+/).filter(p => p.length > 2);\n  \n  let coincidencias = 0;\n  for (const palabraFac of palabrasFactura) {\n    for (const palabraExt of palabrasExtracto) {\n      if (palabraFac === palabraExt || \n          palabraFac.includes(palabraExt) || \n          palabraExt.includes(palabraFac)) {\n        coincidencias++;\n        console.log(`    🎯 Coincidencia de palabra: \"${palabraFac}\" <-> \"${palabraExt}\"`);\n        break;\n      }\n    }\n  }\n  \n  // Si hay al menos 1 coincidencia significativa, es válido\n  if (coincidencias > 0) {\n    console.log(`    ✅ Match por coincidencia de palabras (${coincidencias})`);\n    return true;\n  }\n  \n  // 5. Como último recurso, verificar referencia\n  const referenciaFac = (factura.referencia || '').toString().toLowerCase();\n  if (referenciaFac && extractoNorm.includes(referenciaFac)) {\n    console.log(`    ✅ Match por referencia: \"${referenciaFac}\"`);\n    return true;\n  }\n  \n  console.log(`    ❌ Sin coincidencia`);\n  return false;\n}\n\n// Función para procesar una lista de facturas\nfunction procesarFacturas(facturas, extractos, usadosExtractos, tipoFactura) {\n  const conciliados = [];\n  const pendientes = [];\n  \n  for (const factura of facturas) {\n    let mejorMatch = null;\n    let menorDiferencia = Infinity;\n    let mejorIndice = -1;\n    \n    // Normalizar datos de la factura\n    const fechaFac = normalizarFecha(factura.fecha_fact);\n    const montoFac = normalizarMonto(factura.monto_fact, factura.moneda);\n    \n    if (!fechaFac) {\n      console.warn(`⚠️  ${tipoFactura} con fecha inválida: ${JSON.stringify(factura)}`);\n      continue;\n    }\n    \n    // Buscar candidatos sin usar el filtro de empresa primero\n    const candidatos = [];\n    \n    for (let i = 0; i < extractos.length; i++) {\n      if (usadosExtractos.has(i)) continue;\n      \n      const extracto = extractos[i];\n      const fechaExt = normalizarFecha(extracto.fecha_fact, true);\n      const montoExt = normalizarMonto(extracto.monto_fact, extracto.moneda || 'COP');\n      \n      if (!fechaExt) {\n        console.warn(`⚠️  Extracto ${i} con fecha inválida: ${extracto.fecha_fact}`);\n        continue;\n      }\n      \n      // Calcular diferencias\n      const diffDias = Math.abs((fechaFac - fechaExt) / (1000 * 60 * 60 * 24));\n      const diffValor = Math.abs(montoFac - montoExt);\n      const empresaOk = compararEmpresa(factura, extracto);\n      \n      // Criterios más flexibles\n      const cumpleDias = diffDias <= MATCH_DAYS;\n      const cumpleValor = diffValor <= MATCH_TOL;\n      \n      if (cumpleDias && cumpleValor && empresaOk) {\n        const score = diffDias + (diffValor / 10000);\n        \n        candidatos.push({\n          extracto,\n          indice: i,\n          score,\n          diffDias,\n          diffValor\n        });\n      } else {\n        console.log(`  ❌ No cumple criterios:`);\n        console.log(`    - Días: ${cumpleDias} (${diffDias.toFixed(1)} <= ${MATCH_DAYS})`);\n        console.log(`    - Valor: ${cumpleValor} (${diffValor} <= ${MATCH_TOL})`);\n        console.log(`    - Empresa: ${empresaOk}`);\n      }\n    }\n    \n    // Elegir el mejor candidato\n    if (candidatos.length > 0) {\n      const mejor = candidatos.reduce((mejor, actual) => \n        actual.score < mejor.score ? actual : mejor\n      );\n\n      \n      usadosExtractos.add(mejor.indice);\n      conciliados.push({\n        factura: { ...factura, tipo: tipoFactura },\n        extracto: mejor.extracto,\n        estado: \"Conciliado OK\",\n        score: mejor.score,\n        tipoFactura: tipoFactura\n      });\n    } else {\n      pendientes.push({\n        factura: { ...factura, tipo: tipoFactura },\n        estado: \"Sin coincidencia en extractos\",\n        tipoFactura: tipoFactura\n      });\n    }\n  }\n  \n  return { conciliados, pendientes };\n}\n\n// Obtener los datos de entrada\nconst facturas = items[0].json.facturas || [];\nconst ubercabify = items[0].json.ubercabify || [];\nconst extractos = items[0].json.extractos || [];\n\n// Validación de datos de entrada\nif (!Array.isArray(facturas)) {\n  console.error('❌ Error: facturas no es un array válido');\n  return [{ json: { error: 'Facturas inválidas' } }];\n}\n\nif (!Array.isArray(ubercabify)) {\n  console.error('❌ Error: ubercabify no es un array válido');\n  return [{ json: { error: 'UberCabify inválidas' } }];\n}\n\nif (!Array.isArray(extractos)) {\n  console.error('❌ Error: extractos no es un array válido');\n  return [{ json: { error: 'Extractos inválidos' } }];\n}\n\n// Inicializar arrays de resultados\nlet todosLosConciliados = [];\nlet todasLasPendientes = [];\nconst usadosExtractos = new Set();\n\n// Procesar facturas regulares\nconst resultadosFacturas = procesarFacturas(facturas, extractos, usadosExtractos, 'factura');\ntodosLosConciliados = todosLosConciliados.concat(resultadosFacturas.conciliados);\ntodasLasPendientes = todasLasPendientes.concat(resultadosFacturas.pendientes);\n\n// Procesar facturas UberCabify\nconst resultadosUberCabify = procesarFacturas(ubercabify, extractos, usadosExtractos, 'ubercabify');\ntodosLosConciliados = todosLosConciliados.concat(resultadosUberCabify.conciliados);\ntodasLasPendientes = todasLasPendientes.concat(resultadosUberCabify.pendientes);\n\n// Extractos sin usar\nconst pendientesExtracto = extractos\n  .map((extracto, i) => ({ \n    extracto, \n    estado: \"Sin coincidencia en facturas\",\n    indice: i \n  }))\n  .filter((item) => !usadosExtractos.has(item.indice))\n  .map(item => ({ extracto: item.extracto, estado: item.estado }));\n\nreturn [\n  { json: { conciliados: todosLosConciliados, total: todosLosConciliados.length } },\n  { json: { pendientesFactura: todasLasPendientes, total: todasLasPendientes.length } },\n  { json: { pendientesExtracto, total: pendientesExtracto.length } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        40
      ],
      "id": "ad548818-3630-4198-9166-c558515892c5",
      "name": "Unir1",
      "notes": "Se realiza la unión y validación de la conciliación de los datos entre facturas y extractos"
    },
    {
      "parameters": {
        "resource": "worksheet",
        "operation": "readRows",
        "workbook": {
          "__rl": true,
          "value": "01HZVEXTKXTRZDXXGT75AJFCFASOOWAHT2",
          "mode": "list",
          "cachedResultName": "Facturas",
          "cachedResultUrl": "https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7B3B729C57-D3DC-40FF-9288-A0939D601E7A%7D&file=Facturas.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1"
        },
        "worksheet": {
          "__rl": true,
          "value": "{00000000-0001-0000-0000-000000000000}",
          "mode": "list",
          "cachedResultName": "Consolidado Facturas",
          "cachedResultUrl": "https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7B3B729C57-D3DC-40FF-9288-A0939D601E7A%7D&file=Facturas.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=Consolidado%20Facturas!A1"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.microsoftExcel",
      "typeVersion": 2.1,
      "position": [
        -460,
        80
      ],
      "id": "e4f41933-1f17-4210-b948-5556a9bfb75d",
      "name": "DB Facturas",
      "notesInFlow": true,
      "credentials": {
        "microsoftExcelOAuth2Api": {
          "id": "UMjXt9SIb2Tb1XTc",
          "name": "Excel Inverlink"
        }
      },
      "notes": "Base de datos de facturas, se realiza la extracción de la información de las facturas."
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "DB Facturas",
            "type": "main",
            "index": 0
          },
          {
            "node": "DB Extractos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB Extractos": {
      "main": [
        [
          {
            "node": "Extractos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extractos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Facturas": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Cruce": {
      "main": [
        []
      ]
    },
    "Unir": {
      "main": [
        []
      ]
    },
    "retorno conciliados": {
      "main": [
        [
          {
            "node": "consolidados procesados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "consolidados procesados": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Facturas conciliadas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Facturas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Unir1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unir1": {
      "main": [
        [
          {
            "node": "retorno conciliados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB Facturas": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Bogota",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "148d37f9-e530-4e67-b5aa-a30fadc52238",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-06-03T20:36:49.469Z",
      "updatedAt": "2025-06-03T20:36:49.469Z",
      "id": "E9oSeWOtAViNQ19X",
      "name": "Inverlink"
    }
  ]
}
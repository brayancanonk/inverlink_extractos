{
  "fileName": "Conciliaci_n_Bancaria.json",
  "fileContent": "{\n  \"createdAt\": \"2024-10-30T21:28:56.698Z\",\n  \"updatedAt\": \"2024-11-25T13:24:31.595Z\",\n  \"id\": \"cT61bFVuy6cegFIW\",\n  \"name\": \"Conciliación Bancaria\",\n  \"active\": false,\n  \"isArchived\": false,\n  \"nodes\": [\n    {\n      \"parameters\": {},\n      \"id\": \"e07894ae-6e9d-4613-b291-fd789cac9107\",\n      \"name\": \"When clicking ‘Test workflow’\",\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -380,\n        40\n      ]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"download\",\n        \"fileId\": \"={{$json[\\\"id\\\"]}}\"\n      },\n      \"id\": \"8a14a579-9b2f-4e19-b43d-c147fbd68905\",\n      \"name\": \"Microsoft OneDrive1\",\n      \"type\": \"n8n-nodes-base.microsoftOneDrive\",\n      \"typeVersion\": 1,\n      \"position\": [\n        20,\n        140\n      ],\n      \"credentials\": {\n        \"microsoftOneDriveOAuth2Api\": {\n          \"id\": \"VuffFQLziQK9I5pc\",\n          \"name\": \"Microsoft Drive account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"folder\",\n        \"folderId\": \"01PHCLF5E3CLWOHKGQZVDKGVX6P5QBIHZQ\"\n      },\n      \"id\": \"d96bd4a6-b365-4b72-94f2-2e4858ced0d9\",\n      \"name\": \"Microsoft OneDrive\",\n      \"type\": \"n8n-nodes-base.microsoftOneDrive\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -160,\n        140\n      ],\n      \"credentials\": {\n        \"microsoftOneDriveOAuth2Api\": {\n          \"id\": \"VuffFQLziQK9I5pc\",\n          \"name\": \"Microsoft Drive account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"content\": \"Extracción data PDF\\n\\nCarga el documento PDF para la extracción de información. Devuelve la data en Json\",\n        \"height\": 535.8700624077513,\n        \"width\": 956.759134270801,\n        \"color\": 7\n      },\n      \"id\": \"d7d860d2-cee8-4572-a17e-27eb1a82f7eb\",\n      \"name\": \"Sticky Note\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -420,\n        -200\n      ]\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"folder\",\n        \"folderId\": \"01PHCLF5GHCJ35DYE36BDKTOGEKLGNRC6R\"\n      },\n      \"id\": \"92559046-c921-4876-a745-f4f7dbe76821\",\n      \"name\": \"Microsoft OneDrive2\",\n      \"type\": \"n8n-nodes-base.microsoftOneDrive\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -160,\n        -40\n      ],\n      \"credentials\": {\n        \"microsoftOneDriveOAuth2Api\": {\n          \"id\": \"VuffFQLziQK9I5pc\",\n          \"name\": \"Microsoft Drive account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"pdf\",\n        \"options\": {}\n      },\n      \"id\": \"3086c97c-5ac6-4ee8-a88c-f324ae603efe\",\n      \"name\": \"Extract from File\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"typeVersion\": 1,\n      \"position\": [\n        200,\n        140\n      ]\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Accede al campo 'text' en el JSON extraído\\nconst texto = $json.text;\\n\\n// Expresión regular para buscar patrones de fecha, descripción y valor\\nconst movimientos = texto.match(/(\\\\d{2}\\\\/\\\\d{2})\\\\s(\\\\d+)\\\\s(.+)\\\\s([-\\\\d,]+\\\\.\\\\d{2})\\\\s([\\\\d,]+\\\\.\\\\d{2})/g);\\n\\nif (!movimientos) {\\n    throw new Error(\\\"No se encontraron movimientos en el texto.\\\");\\n}\\n\\n// Convierte cada movimiento a un objeto estructurado, agregando el año 2024 a las fechas\\nconst datosExtraidos = movimientos.map(movimiento => {\\n    const partes = movimiento.match(/(\\\\d{2}\\\\/\\\\d{2})\\\\s(\\\\d+)\\\\s(.+?)\\\\s([-\\\\d,]+\\\\.\\\\d{2})\\\\s([\\\\d,]+\\\\.\\\\d{2})/);\\n    \\n    // Agrega el año a la fecha\\n    const fecha = partes[1] + '/2024';  // Ajusta el año según corresponda\\n\\n    return {\\n        fecha: fecha,\\n        codigo: partes[2],\\n        descripcion: partes[3],\\n        valor: parseFloat(partes[4].replace(/,/g, '')),\\n        saldo: parseFloat(partes[5].replace(/,/g, ''))\\n    };\\n});\\n\\nreturn datosExtraidos.map(movimiento => ({ json: movimiento }));\\n\\n\"\n      },\n      \"id\": \"1006bb02-c6fd-4e09-b5ba-b6eafc390b05\",\n      \"name\": \"Code\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        380,\n        140\n      ]\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"download\",\n        \"fileId\": \"={{ $json.id }}\"\n      },\n      \"id\": \"6360784d-e951-48a1-853c-b45f5808f6da\",\n      \"name\": \"Microsoft OneDrive3\",\n      \"type\": \"n8n-nodes-base.microsoftOneDrive\",\n      \"typeVersion\": 1,\n      \"position\": [\n        20,\n        -40\n      ],\n      \"credentials\": {\n        \"microsoftOneDriveOAuth2Api\": {\n          \"id\": \"VuffFQLziQK9I5pc\",\n          \"name\": \"Microsoft Drive account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"xlsx\",\n        \"options\": {}\n      },\n      \"id\": \"d8dccf26-254b-49c4-8141-1f32d6d2a66c\",\n      \"name\": \"Extract from File1\",\n      \"type\": \"n8n-nodes-base.extractFromFile\",\n      \"typeVersion\": 1,\n      \"position\": [\n        200,\n        -40\n      ]\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Función para convertir el número de serie de fecha de Excel a DD/MM/YYYY\\nfunction excelDateToJSDate(excelDate) {\\n    if (!excelDate || isNaN(excelDate)) return null;\\n    const jsDate = new Date((excelDate - 25569) * 86400 * 1000);\\n    const day = jsDate.getDate().toString().padStart(2, '0');\\n    const month = (jsDate.getMonth() + 1).toString().padStart(2, '0');\\n    const year = jsDate.getFullYear();\\n    return `${day}/${month}/${year}`;\\n}\\n\\n// Función para limpiar y convertir valores numéricos\\nfunction parseNumber(value) {\\n    if (typeof value === 'string') {\\n        return parseFloat(value.replace(/,/g, '').trim()) || 0;\\n    }\\n    return parseFloat(value) || 0;\\n}\\n\\n// Recorre cada fila extraída y organiza las columnas relevantes\\nconst movimientosContables = $input.all().map((item) => {\\n    const row = item.json;\\n\\n    return {\\n        cuenta: row['CUENTA'] || row['__EMPTY'] || \\\"\\\",\\n        descripcionCuenta: row['DESCRIPCION'] || row['__EMPTY_1'] || \\\"\\\",\\n        saldoInicial: parseNumber(row['SALDO INICIAL'] || row['__EMPTY_2'] || 0),\\n        comprobante: row['COMPROBANTE'] || row['__EMPTY_3'] || \\\"\\\",\\n        fecha: excelDateToJSDate(row['FECHA'] || row['__EMPTY_4']),\\n        nit: row['NIT'] || row['__EMPTY_5'] || \\\"\\\",\\n        nombre: row['NOMBRE'] || row['__EMPTY_6'] || \\\"\\\",\\n        detalleDescripcion: row['DESCRIPCION'] || row['__EMPTY_7'] || \\\"\\\",\\n        inventarioCruceCheque: row['INVENTARIO-CRUCE-CHEQUE'] || row['__EMPTY_8'] || \\\"\\\",\\n        base: parseNumber(row['BASE'] || row['__EMPTY_9'] || 0),\\n        cc: row['CC SCC'] || row['__EMPTY_10'] || \\\"\\\",\\n        debitos: parseNumber(row['DEBITOS'] || row['__EMPTY_11'] || 0),\\n        creditos: parseNumber(row['CREDITOS'] || row['__EMPTY_12'] || 0),\\n        saldoMov: parseNumber(row['SALDO MOV.'] || row['__EMPTY_13'] || 0),\\n        observacion: row['OBSERVACION'] || \\\"\\\"\\n    };\\n});\\n\\n// Filtra las filas para solo incluir cuentas de bancos (grupo 11)\\nconst movimientosValidos = movimientosContables.filter(movimiento => movimiento.cuenta.startsWith(\\\"11\\\") && movimiento.fecha);\\n\\n// Devuelve los movimientos contables como salida JSON\\nreturn movimientosValidos.map(movimiento => ({ json: movimiento }));\\n\"\n      },\n      \"id\": \"c5d65394-2b30-4443-b3af-504de0284803\",\n      \"name\": \"Code1\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        380,\n        -40\n      ],\n      \"alwaysOutputData\": true\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Obtener los datos de ambos nodos\\nconst movimientosContables = $items(\\\"Code1\\\", 0).map(item => item.json); // Nodo del movimiento contable\\nconst extractoBancario = $items(\\\"Code\\\", 0).map(item => item.json); // Nodo del extracto bancario\\n\\n// Validar que ambos nodos tengan datos y que sean arrays\\nif (!Array.isArray(movimientosContables) || movimientosContables.length === 0) {\\n    throw new Error(\\\"No se encontraron datos válidos en el nodo 'Code1'. Verifica que el nodo 'Code1' esté conectado correctamente y que envíe datos.\\\");\\n}\\n\\nif (!Array.isArray(extractoBancario) || extractoBancario.length === 0) {\\n    throw new Error(\\\"No se encontraron datos válidos en el nodo 'Code'. Verifica que el nodo 'Code' esté conectado correctamente y que envíe datos.\\\");\\n}\\n\\n// Listas de salida\\nconst coincidencias = [];\\nconst extractoNoCoincide = [];\\nconst movimientosNoCoinciden = [];\\n\\n// Crear una copia de la lista de movimientos contables para identificar los no coincidentes\\nlet movimientosRestantes = [...movimientosContables];\\n\\n// Comparar extractos con movimientos contables\\nextractoBancario.forEach(transaccion => {\\n    if (typeof transaccion !== 'object' || transaccion === null) {\\n        console.log(\\\"Transacción no es un objeto válido:\\\", transaccion);\\n        return;\\n    }\\n    \\n    let encontrado = false;\\n\\n    for (let i = 0; i < movimientosRestantes.length; i++) {\\n        const movimiento = movimientosRestantes[i];\\n\\n        if (typeof movimiento !== 'object' || movimiento === null) {\\n            console.log(\\\"Movimiento no es un objeto válido:\\\", movimiento);\\n            continue;\\n        }\\n\\n        // Comprobar coincidencia entre movimiento contable y extracto bancario\\n        if (\\n            movimiento.fecha === transaccion.fecha &&\\n            (Math.abs(movimiento.debitos) === Math.abs(transaccion.valor) || Math.abs(movimiento.creditos) === Math.abs(transaccion.valor))\\n        ) {\\n            encontrado = true;\\n\\n            // Añadir a coincidencias\\n            coincidencias.push({\\n                json: {\\n                    fecha: transaccion.fecha,\\n                    descripcionExtracto: transaccion.descripcion,\\n                    valorExtracto: transaccion.valor,\\n                    descripcionMovimiento: movimiento.detalleDescripcion,\\n                    debitosMovimiento: movimiento.debitos,\\n                    creditosMovimiento: movimiento.creditos,\\n                    cuentaMovimiento: movimiento.cuenta\\n                }\\n            });\\n\\n            // Remover movimiento de los movimientos restantes\\n            movimientosRestantes.splice(i, 1);\\n            break; // Salir del bucle una vez encontrado\\n        }\\n    }\\n\\n    // Si no se encontró coincidencia, agregar al extracto sin coincidencia\\n    if (!encontrado) {\\n        extractoNoCoincide.push({ json: { ...transaccion } });\\n    }\\n});\\n\\n// Movimientos restantes son los que no tienen coincidencia con los extractos\\nmovimientosRestantes.forEach(movimiento => {\\n    if (typeof movimiento === 'object' && movimiento !== null) {\\n        movimientosNoCoinciden.push({ json: { ...movimiento } });\\n    } else {\\n        console.log(\\\"Movimiento restante no es un objeto válido:\\\", movimiento);\\n    }\\n});\\n\\n// Verificar que cada salida tenga la propiedad 'json' que apunte a un objeto\\nconst verificarSalida = (lista, nombre) => {\\n    lista.forEach((item, index) => {\\n        if (typeof item.json !== 'object' || item.json === null) {\\n            throw new Error(`Elemento en '${nombre}' en el índice ${index} no es un objeto válido.`);\\n        }\\n    });\\n};\\n\\nverificarSalida(coincidencias, \\\"coincidencias\\\");\\nverificarSalida(extractoNoCoincide, \\\"extractoNoCoincide\\\");\\nverificarSalida(movimientosNoCoinciden, \\\"movimientosNoCoinciden\\\");\\n\\n// Retornar tres salidas: coincidencias, extractos no coincidentes, movimientos no coincidentes\\nreturn [\\n    { json: { resultado: \\\"coincidencias\\\", data: coincidencias } },\\n    { json: { resultado: \\\"extractoNoCoincide\\\", data: extractoNoCoincide } },\\n    { json: { resultado: \\\"movimientosNoCoinciden\\\", data: movimientosNoCoinciden } }\\n];\\n\\n\"\n      },\n      \"id\": \"f586ffe1-604b-4286-972e-a31c53f44b51\",\n      \"name\": \"Code2\",\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        660,\n        40\n      ]\n    },\n    {\n      \"parameters\": {\n        \"content\": \"Cruce de información\",\n        \"height\": 536,\n        \"width\": 1224,\n        \"color\": 7\n      },\n      \"id\": \"aa62ed61-844a-492f-ac08-ea9d57709c31\",\n      \"name\": \"Sticky Note1\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"typeVersion\": 1,\n      \"position\": [\n        580,\n        -200\n      ]\n    },\n    {\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"id\": \"3e5bce2c-6d6d-4d93-b747-d7968883c525\",\n      \"name\": \"Loop Over Items\",\n      \"type\": \"n8n-nodes-base.splitInBatches\",\n      \"typeVersion\": 3,\n      \"position\": [\n        1000,\n        -100\n      ]\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"table\",\n        \"operation\": \"addTable\",\n        \"workbook\": {\n          \"__rl\": true,\n          \"value\": \"01PHCLF5AKTZDZIKTHEFE3C6SAFTH5LOKV\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Conciliacion_Bancos\",\n          \"cachedResultUrl\": \"https://kryptocolombia-my.sharepoint.com/personal/edgar_caballero_krypto_com_co/_layouts/15/Doc.aspx?sourcedoc=%7B94479E0A-672A-4921-B17A-402CCFD5B955%7D&file=Conciliacion_Bancos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1\"\n        },\n        \"worksheet\": {\n          \"__rl\": true,\n          \"value\": \"{00000000-0001-0000-0000-000000000000}\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Hoja1\",\n          \"cachedResultUrl\": \"https://kryptocolombia-my.sharepoint.com/personal/edgar_caballero_krypto_com_co/_layouts/15/Doc.aspx?sourcedoc=%7B94479E0A-672A-4921-B17A-402CCFD5B955%7D&file=Conciliacion_Bancos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=Hoja1!A1\"\n        }\n      },\n      \"id\": \"4c05771a-440c-46f3-b85a-afb3cd2f4d2a\",\n      \"name\": \"Microsoft Excel 365\",\n      \"type\": \"n8n-nodes-base.microsoftExcel\",\n      \"typeVersion\": 2.1,\n      \"position\": [\n        1560,\n        -20\n      ],\n      \"credentials\": {\n        \"microsoftExcelOAuth2Api\": {\n          \"id\": \"RdWQiCkLyjhP02OR\",\n          \"name\": \"Microsoft Excel account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"modelId\": {\n          \"__rl\": true,\n          \"value\": \"gpt-4\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"GPT-4\"\n        },\n        \"messages\": {\n          \"values\": [\n            {\n              \"content\": \"=You are an assistant who will validate accounting records from consolidated bank transactions and accounting movements. Your task is to identify matching entries, mismatches, and any unusual activity based on given criteria.\\n\",\n              \"role\": \"system\"\n            },\n            {\n              \"content\": \"=I have consolidated data from bank transactions and accounting records. Please validate the information and provide:\\n\\n- A list of matched transactions.\\n- A list of unmatched transactions in bank records.\\n- A list of unmatched accounting movements.\\n\\nHere is the data:\\n\\n{{ JSON.stringify($input.all()) }}\\n\\nThis is a batch of transactions. Please validate only the entries in this batch and return the matched, unmatched bank transactions, and unmatched accounting movements for this batch.\\n\"\n            }\n          ]\n        },\n        \"simplify\": false,\n        \"jsonOutput\": true,\n        \"options\": {\n          \"maxTokens\": 4096,\n          \"temperature\": \"=0.2\"\n        }\n      },\n      \"id\": \"01793da2-e022-4233-a4bd-8bac0a5cfeea\",\n      \"name\": \"Invoice Description\",\n      \"type\": \"@n8n/n8n-nodes-langchain.openAi\",\n      \"typeVersion\": 1.4,\n      \"position\": [\n        1200,\n        0\n      ],\n      \"alwaysOutputData\": true,\n      \"credentials\": {\n        \"openAiApi\": {\n          \"id\": \"0r1L7QIDC5ZRtM0r\",\n          \"name\": \"OpenAi\"\n        }\n      },\n      \"onError\": \"continueErrorOutput\"\n    }\n  ],\n  \"connections\": {\n    \"Microsoft OneDrive1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract from File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Microsoft OneDrive\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Microsoft OneDrive1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Microsoft OneDrive2\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Microsoft OneDrive3\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract from File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Microsoft OneDrive3\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extract from File1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Microsoft OneDrive2\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Microsoft OneDrive\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extract from File1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Code\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Code2\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Loop Over Items\": {\n      \"main\": [\n        [],\n        [\n          {\n            \"node\": \"Invoice Description\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Invoice Description\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Microsoft Excel 365\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Microsoft Excel 365\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"meta\": {\n    \"templateCredsSetupCompleted\": true\n  },\n  \"pinData\": {},\n  \"versionId\": \"3abac26a-628d-4246-ae8f-88146eac9f1f\",\n  \"triggerCount\": 0,\n  \"tags\": []\n}"
}
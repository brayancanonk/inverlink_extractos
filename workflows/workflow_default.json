{
  "fileName": "Inverlink___Conciliaci_n_pruebas.json",
  "fileContent": "{\n  \"createdAt\": \"2025-06-25T13:28:25.151Z\",\n  \"updatedAt\": \"2025-07-15T14:56:44.626Z\",\n  \"id\": \"ElyzfUlQGqbwXpq0\",\n  \"name\": \"Inverlink - Conciliación pruebas\",\n  \"active\": false,\n  \"isArchived\": false,\n  \"nodes\": [\n    {\n      \"parameters\": {},\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -740,\n        40\n      ],\n      \"id\": \"53af8a84-16e3-4ab1-b203-b75217e993dc\",\n      \"name\": \"When clicking ‘Execute workflow’\"\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"worksheet\",\n        \"operation\": \"readRows\",\n        \"workbook\": {\n          \"__rl\": true,\n          \"value\": \"01HZVEXTIWP4G5HEI7J5DYASYQ46DK7OQC\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Extractos\",\n          \"cachedResultUrl\": \"https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1\"\n        },\n        \"worksheet\": {\n          \"__rl\": true,\n          \"value\": \"{00000000-0001-0000-0000-000000000000}\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"extractos\",\n          \"cachedResultUrl\": \"https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=extractos!A1\"\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.microsoftExcel\",\n      \"typeVersion\": 2.1,\n      \"position\": [\n        -240,\n        -100\n      ],\n      \"id\": \"e180e3bc-5483-432e-b792-262e5433207e\",\n      \"name\": \"DB Extractos\",\n      \"notesInFlow\": true,\n      \"credentials\": {\n        \"microsoftExcelOAuth2Api\": {\n          \"id\": \"UMjXt9SIb2Tb1XTc\",\n          \"name\": \"Excel Inverlink\"\n        }\n      },\n      \"notes\": \"Base de datos de extractos, se realiza la extracción de datos de las columnas de extractos.\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"const facturas = $items(\\\"Facturas\\\", 0).map(i => i.json.facturas).flat();\\nconst extractos = $items(\\\"Extractos\\\", 0).map(i => i.json.extractos).flat();\\n\\nreturn [\\n  {\\n    json: {\\n      facturas,\\n      extractos\\n    }\\n  }\\n];\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        420,\n        -300\n      ],\n      \"id\": \"4e541b88-fd6f-40ea-b077-298350dc3835\",\n      \"name\": \"Cruce\"\n    },\n    {\n      \"parameters\": {\n        \"content\": \"## validaciones\\n- variables importantes [ Fecha, Valor, Descripción]\\n- se debe validar el formato de la fecha ya que algunas veces se recibirá de la siguiente forma (45394), son los días a partir del 1 de enero de 1900\\n- se debe tener los datos de USD o monedas internacionales para la conversión de un API\\n- Agregar un estado de conciliado en el extracto, DB Extractos. Para hacer una validación si las facturas y extractos están conciliados no es necesario traerlos\",\n        \"height\": 240,\n        \"width\": 680\n      },\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -560,\n        -520\n      ],\n      \"id\": \"506e1184-3a82-4434-a04b-26ecdd78db6d\",\n      \"name\": \"Sticky Note\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"function cleanValor(valor) {\\n    if (typeof valor !== 'string') valor = String(valor);\\n    valor = valor.trim().replace(/\\\\$/g, '').replace(/\\\\s/g, '');\\n    if (valor.includes(',')) {\\n        valor = valor.replace(/\\\\./g, '').replace(',', '.');\\n    } else if (valor.match(/[.]\\\\d{2}$/)) {\\n        valor = valor.replace(/,/g, '');\\n    }\\n    const num = Number(valor);\\n    return Math.abs(Math.trunc(num));\\n}\\n\\nfunction formatFechaDDMMYYYY(fecha) {\\n    if (!fecha || !fecha.match(/^\\\\d{4}-\\\\d{2}-\\\\d{2}$/)) return null;\\n\\n    const [y, m, d] = fecha.split('-');\\n    return `${d}/${m}/${y}`;\\n}\\n\\nfunction cleanFecha(fecha) {\\n    if (fecha === null || fecha === undefined) return null;\\n\\n    // Si es un número de Excel\\n    if (!isNaN(fecha) && typeof fecha !== 'string') {\\n        const baseDate = new Date(1900, 0, 1);\\n        baseDate.setDate(baseDate.getDate() + Number(fecha) - 1); // <- corregido\\n        return baseDate.toISOString().split('T')[0]; // yyyy-mm-dd\\n    }\\n\\n    fecha = String(fecha).trim();\\n\\n    // Caso: \\\"dd/mm\\\" sin año\\n    if (fecha.match(/^(\\\\d{1,2})\\\\/(\\\\d{1,2})$/)) {\\n        let [_, d, m] = fecha.match(/^(\\\\d{1,2})\\\\/(\\\\d{1,2})$/);\\n        let y = new Date().getFullYear(); // Asume año actual\\n        return `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\\n    }\\n\\n    // Caso: \\\"dd/mm/yyyy\\\"\\n    if (fecha.match(/^(\\\\d{1,2})\\\\/(\\\\d{1,2})\\\\/(\\\\d{2,4})$/)) {\\n        let [_, d, m, y] = fecha.match(/^(\\\\d{1,2})\\\\/(\\\\d{1,2})\\\\/(\\\\d{2,4})$/);\\n        if (y.length === 2) y = '20' + y;\\n        return `${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`;\\n    }\\n\\n    return fecha;\\n}\\n\\nlet extractos = items.map(e => {\\n    const fechaISO = cleanFecha(e.json['Fecha (Día/Mes)']);\\n\\n    return {\\n        descripcion: e.json['Descripción'] || '',\\n        empresa: e.json['Banco'] || '',\\n        referencia: e.json['No de Compte'] || e.json['Tarjeta (últimos dígitos)'] || '',\\n        fecha_fact: formatFechaDDMMYYYY(fechaISO),\\n        //fecha_formato_largo: fechaISO,\\n        monto_fact: cleanValor(e.json['Valor Compra'] || e.json['Cargos y Abonos']),\\n        moneda: 'COP',\\n        URL: e.json['Url extracto'] || '',\\n    };\\n});\\n\\nreturn [\\n    {\\n        json: {\\n            extractos: extractos\\n        }\\n    }\\n];\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        -40,\n        -100\n      ],\n      \"id\": \"458c9951-10e4-4abb-8961-e06f5a74ca4d\",\n      \"name\": \"Extractos\",\n      \"notes\": \"Se realiza el ajuste y validación de la información de los extractos y se cargan en una sola lista\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"function cleanValor(valor) {\\n    if (typeof valor !== 'string') valor = String(valor);\\n    valor = valor.trim().replace(/\\\\$/g, '').replace(/\\\\s/g, '');\\n    if (valor.includes(',')) {\\n        valor = valor.replace(/\\\\./g, '').replace(',', '.');\\n    } else if (valor.match(/[.]\\\\d{2}$/)) {\\n        valor = valor.replace(/,/g, '');\\n    }\\n    const num = Number(valor);\\n    return Math.abs(Math.trunc(num));\\n}\\n\\nfunction cleanFecha(fecha) {\\n    if (fecha === null || fecha === undefined) return null;\\n\\n    // Si es un número de Excel (ej: 45394)\\n    if (!isNaN(fecha) && typeof fecha !== 'string') {\\n        const baseDate = new Date(1900, 0, 1);\\n        baseDate.setDate(baseDate.getDate() + Number(fecha) - 2); // <- corregido aquí\\n        const day = baseDate.getDate().toString().padStart(2, '0');\\n        const month = (baseDate.getMonth() + 1).toString().padStart(2, '0');\\n        const year = baseDate.getFullYear();\\n        return `${day}/${month}/${year}`;\\n    }\\n\\n    // Si es string (tipo \\\"4/12/2024\\\")\\n    fecha = String(fecha).trim();\\n    if (fecha.match(/^(\\\\d{1,2})\\\\/(\\\\d{1,2})\\\\/(\\\\d{2,4})$/)) {\\n        let [_, d, m, y] = fecha.match(/^(\\\\d{1,2})\\\\/(\\\\d{1,2})\\\\/(\\\\d{2,4})$/);\\n        if (y.length === 2) y = '20' + y;\\n        return `${d.padStart(2, '0')}/${m.padStart(2, '0')}/${y}`;\\n    }\\n\\n    return fecha;\\n}\\n\\nlet facturas = items.map(e => {\\n    return {\\n        descripcion: e.json['Descripción'] || '',\\n        empresa: e.json['Empresa emisora'] || '',\\n        referencia: e.json['Número de comprobante o referencia'] || '',\\n        fecha_fact: cleanFecha(e.json['Fecha de pago o compra']),\\n        monto_fact: cleanValor(e.json['Monto total cobrado']),\\n        moneda: e.json['Moneda'] || 'COP',\\n        URL: e.json['Url factura']\\n    };\\n});\\n\\nreturn [\\n    {\\n        json: {\\n            facturas: facturas\\n        }\\n    }\\n];\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        -20,\n        100\n      ],\n      \"id\": \"c9faf833-7d90-41d6-89cd-9a677620d496\",\n      \"name\": \"Facturas\",\n      \"notes\": \"Se realiza el ajuste y validación de la información de las facturas \"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"const entrada = $input.item.json;\\n\\nfunction parseFecha(fechaStr) {\\n  if (!fechaStr) return null;\\n  const [day, month, year] = fechaStr.split('/');\\n  return new Date(`${year}-${month}-${day}`);\\n}\\n\\nfunction fechasCercanas(fecha1, fecha2, margenDias = 3) {\\n  if (!fecha1 || !fecha2) return false;\\n  const diff = Math.abs(fecha1 - fecha2);\\n  return diff <= margenDias * 86400000;\\n}\\n\\nfunction normalizarTexto(texto) {\\n  return texto?.toLowerCase()\\n    .normalize(\\\"NFD\\\")\\n    .replace(/[\\\\u0300-\\\\u036f]/g, '')\\n    .replace(/[^a-z0-9]/g, ' ')\\n    .replace(/\\\\s+/g, ' ')\\n    .trim() || '';\\n}\\n\\nconst extractos = entrada.extractos.filter(e => e.monto_fact > 0);\\nconst facturas = entrada.facturas.filter(f => f.monto_fact > 0);\\n\\nconst conciliados = [];\\nconst facturasPendientes = [];\\nconst extractosSinConciliar = [];\\n\\nconst usadosExtractos = new Set();\\n\\nfor (const factura of facturas) {\\n  const fechaFactura = parseFecha(factura.fecha_fact);\\n  const montoFactura = factura.monto_fact;\\n  const descFactura = normalizarTexto(factura.descripcion);\\n  const empresaFactura = normalizarTexto(factura.empresa);\\n\\n  let matchIndex = -1;\\n\\n  for (let i = 0; i < extractos.length; i++) {\\n    if (usadosExtractos.has(i)) continue;\\n\\n    const extr = extractos[i];\\n    const fechaExtracto = parseFecha(extr.fecha_fact);\\n    const montoExtracto = extr.monto_fact;\\n    const descExtracto = normalizarTexto(extr.descripcion);\\n\\n    const montoIgual = montoFactura === montoExtracto;\\n    const fechaSimilar = fechasCercanas(fechaFactura, fechaExtracto);\\n    const descripcionRelacionada =\\n      (descExtracto.includes('uber') && empresaFactura.includes('uber')) ||\\n      (descExtracto.includes('cabify') && empresaFactura.includes('cabify')) ||\\n      descExtracto.includes(normalizarTexto(factura.empresa));\\n\\n    if (montoIgual && fechaSimilar && descripcionRelacionada) {\\n      matchIndex = i;\\n      break;\\n    }\\n  }\\n\\n  if (matchIndex >= 0) {\\n    usadosExtractos.add(matchIndex);\\n    conciliados.push({\\n      factura,\\n      extracto: extractos[matchIndex]\\n    });\\n  } else {\\n    facturasPendientes.push(factura);\\n  }\\n}\\n\\n// Cargar extractos no usados\\nextractos.forEach((e, i) => {\\n  if (!usadosExtractos.has(i)) extractosSinConciliar.push(e);\\n});\\n\\nreturn [\\n  { json: { conciliados } },\\n  { json: { facturasPendientes } },\\n  { json: { extractosSinConciliar } }\\n];\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        660,\n        -300\n      ],\n      \"id\": \"d4f81d52-7fe0-493e-8a6c-a21b6bc8813b\",\n      \"name\": \"Unir\"\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"worksheet\",\n        \"operation\": \"append\",\n        \"workbook\": {\n          \"__rl\": true,\n          \"value\": \"01HZVEXTIWP4G5HEI7J5DYASYQ46DK7OQC\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Extractos\",\n          \"cachedResultUrl\": \"https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1\"\n        },\n        \"worksheet\": {\n          \"__rl\": true,\n          \"value\": \"{5E9DF66E-126B-40A3-9DE4-62E109BBB106}\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Conciliados\",\n          \"cachedResultUrl\": \"https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7BD30D7F16-1F91-474F-804B-10E786AFBA02%7D&file=Extractos.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=Conciliados!A1\"\n        },\n        \"fieldsUi\": {\n          \"values\": [\n            {\n              \"column\": \"Descripción factura\",\n              \"fieldValue\": \"={{ $json.factura_descripcion }}\"\n            },\n            {\n              \"column\": \"Valor factura\",\n              \"fieldValue\": \"={{ $json.factura_valor }}\"\n            },\n            {\n              \"column\": \"Fecha factura\",\n              \"fieldValue\": \"={{ $json.factura_fecha }}\"\n            },\n            {\n              \"column\": \"Descripción extracto\",\n              \"fieldValue\": \"={{ $json.extracto_descripcion }}\"\n            },\n            {\n              \"column\": \"Valor extracto\",\n              \"fieldValue\": \"={{ $json.extracto_valor }}\"\n            },\n            {\n              \"column\": \"Fecha extracto\",\n              \"fieldValue\": \"={{ $json.extracto_fecha }}\"\n            },\n            {\n              \"column\": \"Estado\",\n              \"fieldValue\": \"={{ $json.estado }}\"\n            },\n            {\n              \"column\": \"Empresa emisora\",\n              \"fieldValue\": \"={{ $json.factura_empresa }}\"\n            },\n            {\n              \"column\": \"Empresa extracto\",\n              \"fieldValue\": \"={{ $json.extracto_empresa }}\"\n            },\n            {\n              \"column\": \"Url factura\",\n              \"fieldValue\": \"={{ $json.factura_url }}\"\n            },\n            {\n              \"column\": \"Url extracto\",\n              \"fieldValue\": \"={{ $json.extracto_url }}\"\n            },\n            {\n              \"column\": \"Fecha conciliado\",\n              \"fieldValue\": \"={{ $now.setLocale('es').toFormat('dd/LL/yyyy') }}\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.microsoftExcel\",\n      \"typeVersion\": 2.1,\n      \"position\": [\n        780,\n        40\n      ],\n      \"id\": \"1ba22dd7-3c77-459c-bd59-0002e1490c11\",\n      \"name\": \"consolidados procesados\",\n      \"credentials\": {\n        \"microsoftExcelOAuth2Api\": {\n          \"id\": \"UMjXt9SIb2Tb1XTc\",\n          \"name\": \"Excel Inverlink\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"const data = items.map(item => item.json);\\n\\n// Si los datos vienen en tres objetos separados\\nconst conciliados = data.find(d => d.conciliados)?.conciliados || [];\\n\\nconsole.log(conciliados);\\n//return conciliados;\\n\\n// Conciliados\\n\\n  const conciliadosMap = conciliados.map(item => ({\\n    factura_descripcion: item.factura.descripcion,\\n    factura_empresa: item.factura.empresa,\\n    factura_valor: item.factura.monto_fact,\\n    factura_fecha: item.factura.fecha_fact,\\n    factura_url: item.factura.URL,\\n    extracto_descripcion: item.extracto.descripcion,\\n    extracto_empresa: item.extracto.empresa,\\n    extracto_valor: item.extracto.monto_fact,\\n    extracto_fecha: item.extracto.fecha_fact,\\n    extracto_url: item.extracto.URL,\\n    estado: item.estado,\\n    fechaconciliado: item.fechaconciliado\\n    \\n  }))\\n\\nreturn conciliadosMap\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        580,\n        40\n      ],\n      \"id\": \"3c54eeda-bd92-4d4b-b868-e25a62e0c58c\",\n      \"name\": \"retorno conciliados\",\n      \"notes\": \"Se realiza un retorno de las facturas y extractos conciliados en una lista\"\n    },\n    {\n      \"parameters\": {\n        \"workflowId\": {\n          \"__rl\": true,\n          \"value\": \"bwp4fSY7Kisusg8w\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Inverlink - carga conciliados\"\n        },\n        \"workflowInputs\": {\n          \"mappingMode\": \"defineBelow\",\n          \"value\": {},\n          \"matchingColumns\": [],\n          \"schema\": [],\n          \"attemptToConvertTypes\": false,\n          \"convertFieldsToString\": true\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.executeWorkflow\",\n      \"typeVersion\": 1.2,\n      \"position\": [\n        980,\n        40\n      ],\n      \"id\": \"f943a7c8-2424-450f-b798-babfba6e6fed\",\n      \"name\": \"Execute Workflow\"\n    },\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\",\n            \"version\": 2\n          },\n          \"conditions\": [\n            {\n              \"id\": \"7002c6c1-cc7a-40df-9236-b56f4e83518d\",\n              \"leftValue\": \"={{ $json['Estado conciliado'] }}\",\n              \"rightValue\": \"Conciliado OK\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\",\n                \"name\": \"filter.operator.equals\"\n              }\n            }\n          ],\n          \"combinator\": \"and\"\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2.2,\n      \"position\": [\n        -240,\n        80\n      ],\n      \"id\": \"5a976c28-64dc-4ee8-9b59-3c298cb68805\",\n      \"name\": \"If\"\n    },\n    {\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"combineBy\": \"combineByPosition\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.merge\",\n      \"typeVersion\": 3.2,\n      \"position\": [\n        200,\n        40\n      ],\n      \"id\": \"6d2ebe53-8af7-4c89-ae72-e48b31c4df5f\",\n      \"name\": \"Merge\",\n      \"notes\": \"Se realiza la unión de ambas listas para la conciliación\"\n    },\n    {\n      \"parameters\": {},\n      \"type\": \"n8n-nodes-base.noOp\",\n      \"typeVersion\": 1,\n      \"position\": [\n        -60,\n        280\n      ],\n      \"id\": \"d7aa00cf-84ac-4ddc-8b09-8f8065331627\",\n      \"name\": \"Facturas conciliadas\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"const MATCH_DAYS = 3;     // Aumentar días para mayor flexibilidad\\nconst MATCH_TOL = 5000;  // Aumentar tolerancia para manejar diferencias de formato\\n\\n// Tasas de cambio aproximadas\\nconst USD_TO_COP = 4380;\\n\\n// Función auxiliar para normalizar fechas\\nfunction normalizarFecha(fecha, esExtracto = false) {\\n  if (!fecha) return null;\\n  \\n  // Si es string de fecha completa\\n  if (typeof fecha === 'string') {\\n    // Formato DD/MM/YYYY\\n    if (/^\\\\d{1,2}\\\\/\\\\d{1,2}\\\\/\\\\d{4}$/.test(fecha)) {\\n      const [dia, mes, ano] = fecha.split('/');\\n      const fechaCompleta = `${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;\\n      const fechaObj = new Date(fechaCompleta);\\n      return isNaN(fechaObj.getTime()) ? null : fechaObj;\\n    }\\n    \\n    // Formato DD/MM sin año (para extractos)\\n    if (esExtracto && /^\\\\d{1,2}\\\\/\\\\d{1,2}$/.test(fecha)) {\\n      const [dia, mes] = fecha.split('/');\\n      const fechaCompleta = `2024-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`;\\n      const fechaObj = new Date(fechaCompleta);\\n      return isNaN(fechaObj.getTime()) ? null : fechaObj;\\n    }\\n  }\\n  \\n  // Para otros formatos (ISO, etc.)\\n  const fechaObj = new Date(fecha);\\n  return isNaN(fechaObj.getTime()) ? null : fechaObj;\\n}\\n\\n// Función auxiliar para normalizar valores numéricos - SIMPLIFICADA\\nfunction normalizarMonto(monto, moneda = 'COP') {\\n  if (monto === null || monto === undefined || monto === '') return 0;\\n  \\n  // Si ya es número, convertir directamente\\n  if (typeof monto === 'number') {\\n    const valorCOP = moneda === 'USD' ? monto * USD_TO_COP : monto;\\n    return Math.abs(valorCOP);\\n  }\\n  \\n  // Convertir a string y limpiar\\n  let numeroStr = monto.toString();\\n  \\n  // Eliminar espacios\\n  numeroStr = numeroStr.replace(/\\\\s/g, '');\\n  \\n  // Si contiene comas, reemplazar por puntos para decimal\\n  if (numeroStr.includes(',')) {\\n    // Caso: 1.234.567,89 -> 1234567.89\\n    if (numeroStr.includes('.') && numeroStr.includes(',')) {\\n      numeroStr = numeroStr.replace(/\\\\./g, '').replace(',', '.');\\n    } else {\\n      // Caso: 1234,89 -> 1234.89\\n      numeroStr = numeroStr.replace(',', '.');\\n    }\\n  }\\n  \\n  // Eliminar puntos que son separadores de miles\\n  const partes = numeroStr.split('.');\\n  if (partes.length > 2) {\\n    // Múltiples puntos = separadores de miles\\n    numeroStr = partes.slice(0, -1).join('') + '.' + partes[partes.length - 1];\\n  } else if (partes.length === 2 && partes[1].length > 2) {\\n    // Punto como separador de miles\\n    numeroStr = numeroStr.replace(/\\\\./g, '');\\n  }\\n  \\n  const numero = parseFloat(numeroStr);\\n  \\n  if (isNaN(numero)) {\\n    console.warn(`⚠️  No se pudo parsear el monto: \\\"${monto}\\\" -> \\\"${numeroStr}\\\"`);\\n    return 0;\\n  }\\n  \\n  const valorCOP = moneda === 'USD' ? numero * USD_TO_COP : numero;\\n  return Math.abs(valorCOP);\\n}\\n\\n// Función auxiliar para comparar empresas/descripciones - SIMPLIFICADA Y MÁS FLEXIBLE\\nfunction compararEmpresa(factura, extracto) {\\n  const empresaFac = (factura.empresa || factura.descripcion || '').toLowerCase().trim();\\n  const descExtracto = (extracto.descripcion || '').toLowerCase().trim();\\n  \\n  // Si alguno está vacío, no se puede comparar\\n  if (!empresaFac || !descExtracto) {\\n    console.log(`    ❌ Uno de los campos está vacío`);\\n    return false;\\n  }\\n  \\n  // Limpiar y normalizar texto\\n  const limpiarTexto = (texto) => {\\n    return texto\\n      .replace(/[^\\\\w\\\\s]/g, ' ')  // Reemplazar caracteres especiales con espacios\\n      .replace(/\\\\s+/g, ' ')      // Múltiples espacios -> uno solo\\n      .trim();\\n  };\\n  \\n  const facturaNorm = limpiarTexto(empresaFac);\\n  const extractoNorm = limpiarTexto(descExtracto);\\n  \\n  // 1. Coincidencia exacta (normalizada)\\n  if (facturaNorm === extractoNorm) {\\n    console.log(`    ✅ Match exacto`);\\n    return true;\\n  }\\n  \\n  // 2. Uno contiene al otro\\n  if (facturaNorm.includes(extractoNorm) || extractoNorm.includes(facturaNorm)) {\\n    console.log(`    ✅ Match por contención`);\\n    return true;\\n  }\\n  \\n  // 3. Mapeo específico de términos conocidos\\n  const mapeoTerminos = {\\n    'uber': ['uber', 'rides', 'viaje'],\\n    'cabify': ['cabify', 'viaje'],\\n    'spirit': ['spirit', 'airlines'],\\n    'ceviche': ['ceviche', 'camaron'],\\n    'centro': ['centro', 'che'],\\n    'green': ['green', 'office'],\\n    'step': ['step', 'ahead'],\\n    'hotel': ['hotel', 'estelar'],\\n    'clases': ['clases', 'personalizadas']\\n  };\\n  \\n  for (const [termino, variantes] of Object.entries(mapeoTerminos)) {\\n    const tieneFactura = variantes.some(v => facturaNorm.includes(v));\\n    const tieneExtracto = variantes.some(v => extractoNorm.includes(v));\\n    \\n    if (tieneFactura && tieneExtracto) {\\n      console.log(`    ✅ Match por mapeo de término: \\\"${termino}\\\"`);\\n      return true;\\n    }\\n  }\\n  \\n  // 4. Coincidencia por palabras individuales\\n  const palabrasFactura = facturaNorm.split(/\\\\s+/).filter(p => p.length > 2);\\n  const palabrasExtracto = extractoNorm.split(/\\\\s+/).filter(p => p.length > 2);\\n  \\n  let coincidencias = 0;\\n  for (const palabraFac of palabrasFactura) {\\n    for (const palabraExt of palabrasExtracto) {\\n      if (palabraFac === palabraExt || \\n          palabraFac.includes(palabraExt) || \\n          palabraExt.includes(palabraFac)) {\\n        coincidencias++;\\n        console.log(`    🎯 Coincidencia de palabra: \\\"${palabraFac}\\\" <-> \\\"${palabraExt}\\\"`);\\n        break;\\n      }\\n    }\\n  }\\n  \\n  // Si hay al menos 1 coincidencia significativa, es válido\\n  if (coincidencias > 0) {\\n    console.log(`    ✅ Match por coincidencia de palabras (${coincidencias})`);\\n    return true;\\n  }\\n  \\n  // 5. Como último recurso, verificar referencia\\n  const referenciaFac = (factura.referencia || '').toString().toLowerCase();\\n  if (referenciaFac && extractoNorm.includes(referenciaFac)) {\\n    console.log(`    ✅ Match por referencia: \\\"${referenciaFac}\\\"`);\\n    return true;\\n  }\\n  \\n  console.log(`    ❌ Sin coincidencia`);\\n  return false;\\n}\\n\\n// Función para procesar una lista de facturas\\nfunction procesarFacturas(facturas, extractos, usadosExtractos, tipoFactura) {\\n  const conciliados = [];\\n  const pendientes = [];\\n  \\n  for (const factura of facturas) {\\n    let mejorMatch = null;\\n    let menorDiferencia = Infinity;\\n    let mejorIndice = -1;\\n    \\n    // Normalizar datos de la factura\\n    const fechaFac = normalizarFecha(factura.fecha_fact);\\n    const montoFac = normalizarMonto(factura.monto_fact, factura.moneda);\\n    \\n    if (!fechaFac) {\\n      console.warn(`⚠️  ${tipoFactura} con fecha inválida: ${JSON.stringify(factura)}`);\\n      continue;\\n    }\\n    \\n    // Buscar candidatos sin usar el filtro de empresa primero\\n    const candidatos = [];\\n    \\n    for (let i = 0; i < extractos.length; i++) {\\n      if (usadosExtractos.has(i)) continue;\\n      \\n      const extracto = extractos[i];\\n      const fechaExt = normalizarFecha(extracto.fecha_fact, true);\\n      const montoExt = normalizarMonto(extracto.monto_fact, extracto.moneda || 'COP');\\n      \\n      if (!fechaExt) {\\n        console.warn(`⚠️  Extracto ${i} con fecha inválida: ${extracto.fecha_fact}`);\\n        continue;\\n      }\\n      \\n      // Calcular diferencias\\n      const diffDias = Math.abs((fechaFac - fechaExt) / (1000 * 60 * 60 * 24));\\n      const diffValor = Math.abs(montoFac - montoExt);\\n      const empresaOk = compararEmpresa(factura, extracto);\\n      \\n      // Criterios más flexibles\\n      const cumpleDias = diffDias <= MATCH_DAYS;\\n      const cumpleValor = diffValor <= MATCH_TOL;\\n      \\n      if (cumpleDias && cumpleValor && empresaOk) {\\n        const score = diffDias + (diffValor / 10000);\\n        \\n        candidatos.push({\\n          extracto,\\n          indice: i,\\n          score,\\n          diffDias,\\n          diffValor\\n        });\\n      } else {\\n        console.log(`  ❌ No cumple criterios:`);\\n        console.log(`    - Días: ${cumpleDias} (${diffDias.toFixed(1)} <= ${MATCH_DAYS})`);\\n        console.log(`    - Valor: ${cumpleValor} (${diffValor} <= ${MATCH_TOL})`);\\n        console.log(`    - Empresa: ${empresaOk}`);\\n      }\\n    }\\n    \\n    // Elegir el mejor candidato\\n    if (candidatos.length > 0) {\\n      const mejor = candidatos.reduce((mejor, actual) => \\n        actual.score < mejor.score ? actual : mejor\\n      );\\n\\n      \\n      usadosExtractos.add(mejor.indice);\\n      conciliados.push({\\n        factura: { ...factura, tipo: tipoFactura },\\n        extracto: mejor.extracto,\\n        estado: \\\"Conciliado OK\\\",\\n        score: mejor.score,\\n        tipoFactura: tipoFactura\\n      });\\n    } else {\\n      pendientes.push({\\n        factura: { ...factura, tipo: tipoFactura },\\n        estado: \\\"Sin coincidencia en extractos\\\",\\n        tipoFactura: tipoFactura\\n      });\\n    }\\n  }\\n  \\n  return { conciliados, pendientes };\\n}\\n\\n// Obtener los datos de entrada\\nconst facturas = items[0].json.facturas || [];\\nconst ubercabify = items[0].json.ubercabify || [];\\nconst extractos = items[0].json.extractos || [];\\n\\n// Validación de datos de entrada\\nif (!Array.isArray(facturas)) {\\n  console.error('❌ Error: facturas no es un array válido');\\n  return [{ json: { error: 'Facturas inválidas' } }];\\n}\\n\\nif (!Array.isArray(ubercabify)) {\\n  console.error('❌ Error: ubercabify no es un array válido');\\n  return [{ json: { error: 'UberCabify inválidas' } }];\\n}\\n\\nif (!Array.isArray(extractos)) {\\n  console.error('❌ Error: extractos no es un array válido');\\n  return [{ json: { error: 'Extractos inválidos' } }];\\n}\\n\\n// Inicializar arrays de resultados\\nlet todosLosConciliados = [];\\nlet todasLasPendientes = [];\\nconst usadosExtractos = new Set();\\n\\n// Procesar facturas regulares\\nconst resultadosFacturas = procesarFacturas(facturas, extractos, usadosExtractos, 'factura');\\ntodosLosConciliados = todosLosConciliados.concat(resultadosFacturas.conciliados);\\ntodasLasPendientes = todasLasPendientes.concat(resultadosFacturas.pendientes);\\n\\n// Procesar facturas UberCabify\\nconst resultadosUberCabify = procesarFacturas(ubercabify, extractos, usadosExtractos, 'ubercabify');\\ntodosLosConciliados = todosLosConciliados.concat(resultadosUberCabify.conciliados);\\ntodasLasPendientes = todasLasPendientes.concat(resultadosUberCabify.pendientes);\\n\\n// Extractos sin usar\\nconst pendientesExtracto = extractos\\n  .map((extracto, i) => ({ \\n    extracto, \\n    estado: \\\"Sin coincidencia en facturas\\\",\\n    indice: i \\n  }))\\n  .filter((item) => !usadosExtractos.has(item.indice))\\n  .map(item => ({ extracto: item.extracto, estado: item.estado }));\\n\\nreturn [\\n  { json: { conciliados: todosLosConciliados, total: todosLosConciliados.length } },\\n  { json: { pendientesFactura: todasLasPendientes, total: todasLasPendientes.length } },\\n  { json: { pendientesExtracto, total: pendientesExtracto.length } }\\n];\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        380,\n        40\n      ],\n      \"id\": \"ad548818-3630-4198-9166-c558515892c5\",\n      \"name\": \"Unir1\",\n      \"notes\": \"Se realiza la unión y validación de la conciliación de los datos entre facturas y extractos\"\n    },\n    {\n      \"parameters\": {\n        \"resource\": \"worksheet\",\n        \"operation\": \"readRows\",\n        \"workbook\": {\n          \"__rl\": true,\n          \"value\": \"01HZVEXTKXTRZDXXGT75AJFCFASOOWAHT2\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Facturas\",\n          \"cachedResultUrl\": \"https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7B3B729C57-D3DC-40FF-9288-A0939D601E7A%7D&file=Facturas.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1\"\n        },\n        \"worksheet\": {\n          \"__rl\": true,\n          \"value\": \"{00000000-0001-0000-0000-000000000000}\",\n          \"mode\": \"list\",\n          \"cachedResultName\": \"Consolidado Facturas\",\n          \"cachedResultUrl\": \"https://inverlink-my.sharepoint.com/personal/ekrypto_inverlink_com/_layouts/15/Doc.aspx?sourcedoc=%7B3B729C57-D3DC-40FF-9288-A0939D601E7A%7D&file=Facturas.xlsx&action=default&mobileredirect=true&DefaultItemOpen=1&activeCell=Consolidado%20Facturas!A1\"\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.microsoftExcel\",\n      \"typeVersion\": 2.1,\n      \"position\": [\n        -460,\n        80\n      ],\n      \"id\": \"e4f41933-1f17-4210-b948-5556a9bfb75d\",\n      \"name\": \"DB Facturas\",\n      \"notesInFlow\": true,\n      \"credentials\": {\n        \"microsoftExcelOAuth2Api\": {\n          \"id\": \"UMjXt9SIb2Tb1XTc\",\n          \"name\": \"Excel Inverlink\"\n        }\n      },\n      \"notes\": \"Base de datos de facturas, se realiza la extracción de la información de las facturas.\"\n    }\n  ],\n  \"connections\": {\n    \"When clicking ‘Execute workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"DB Facturas\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"DB Extractos\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"DB Extractos\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Extractos\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Extractos\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Facturas\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Cruce\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"Unir\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"retorno conciliados\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"consolidados procesados\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"consolidados procesados\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Execute Workflow\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Execute Workflow\": {\n      \"main\": [\n        []\n      ]\n    },\n    \"If\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Facturas conciliadas\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Facturas\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Unir1\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Unir1\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"retorno conciliados\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"DB Facturas\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\",\n    \"timezone\": \"America/Bogota\",\n    \"callerPolicy\": \"workflowsFromSameOwner\"\n  },\n  \"staticData\": null,\n  \"meta\": {\n    \"templateCredsSetupCompleted\": true\n  },\n  \"pinData\": {},\n  \"versionId\": \"148d37f9-e530-4e67-b5aa-a30fadc52238\",\n  \"triggerCount\": 0,\n  \"tags\": [\n    {\n      \"createdAt\": \"2025-06-03T20:36:49.469Z\",\n      \"updatedAt\": \"2025-06-03T20:36:49.469Z\",\n      \"id\": \"E9oSeWOtAViNQ19X\",\n      \"name\": \"Inverlink\"\n    }\n  ]\n}"
}
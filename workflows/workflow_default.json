{
  "fileName": "Accounting_Records_v3___6__CCO.json",
  "fileContent": "{\n  \"createdAt\": \"2024-12-12T05:08:59.346Z\",\n  \"updatedAt\": \"2025-03-04T23:10:38.107Z\",\n  \"id\": \"xtICDNoke9fjldZj\",\n  \"name\": \"Accounting Records v3 - 6. CCO\",\n  \"active\": false,\n  \"isArchived\": false,\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"loose\",\n            \"version\": 2\n          },\n          \"conditions\": [\n            {\n              \"id\": \"b3dbb0b2-77f3-434b-88c6-be352f282fc4\",\n              \"leftValue\": \"={{$json[\\\"Centers\\\"]}}\",\n              \"rightValue\": \"\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"notEmpty\",\n                \"singleValue\": true\n              }\n            },\n            {\n              \"id\": \"8ba3ba59-f618-4502-8d9d-69911a773b7c\",\n              \"leftValue\": \"={{$json[\\\"type\\\"] || \\\"Manual\\\"}}\",\n              \"rightValue\": \"Parametrizado\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\",\n                \"name\": \"filter.operator.equals\"\n              }\n            }\n          ],\n          \"combinator\": \"and\"\n        },\n        \"looseTypeValidation\": true,\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 2.2,\n      \"position\": [\n        1100,\n        300\n      ],\n      \"id\": \"f0407ab7-fd90-4907-9cfa-45433f23f427\",\n      \"name\": \"If\"\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"getAll\",\n        \"tableId\": \"Accounting_Records\"\n      },\n      \"type\": \"n8n-nodes-base.supabase\",\n      \"typeVersion\": 1,\n      \"position\": [\n        540,\n        460\n      ],\n      \"id\": \"042ba4c0-f693-4601-8561-4e4707845b1b\",\n      \"name\": \"Data_AccountingRecords\",\n      \"executeOnce\": true,\n      \"credentials\": {\n        \"supabaseApi\": {\n          \"id\": \"U4Lx0acH9rOsOwsN\",\n          \"name\": \"Supabase InvoiceData\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"getAll\",\n        \"tableId\": \"ParamCC\",\n        \"returnAll\": true,\n        \"matchType\": \"allFilters\",\n        \"filters\": {\n          \"conditions\": [\n            {\n              \"keyName\": \"SenderParty_CompanyID\",\n              \"condition\": \"eq\",\n              \"keyValue\": \"={{ $json[\\\"SenderParty_CompanyID\\\"] }}\"\n            },\n            {\n              \"keyName\": \"ReceiverParty_CompanyID\",\n              \"condition\": \"eq\",\n              \"keyValue\": \"={{ $json[\\\"ReceiverParty_CompanyID\\\"] ? parseInt($json[\\\"ReceiverParty_CompanyID\\\"], 10) : null }}\\n\"\n            }\n          ]\n        }\n      },\n      \"name\": \"Data_ParamCC\",\n      \"type\": \"n8n-nodes-base.supabase\",\n      \"typeVersion\": 1,\n      \"position\": [\n        740,\n        460\n      ],\n      \"id\": \"a65ac66b-42ad-4776-a9dd-432ddb1d38fa\",\n      \"executeOnce\": false,\n      \"credentials\": {\n        \"supabaseApi\": {\n          \"id\": \"U4Lx0acH9rOsOwsN\",\n          \"name\": \"Supabase InvoiceData\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"mode\": \"combine\",\n        \"advanced\": true,\n        \"mergeByFields\": {\n          \"values\": [\n            {\n              \"field1\": \"SenderParty_CompanyID\",\n              \"field2\": \"SenderParty_CompanyID\"\n            },\n            {\n              \"field1\": \"ReceiverParty_CompanyID\",\n              \"field2\": \"ReceiverParty_CompanyID\"\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.merge\",\n      \"typeVersion\": 3,\n      \"position\": [\n        760,\n        300\n      ],\n      \"id\": \"9eb1144a-f890-4464-b89c-15cc39e4c07a\",\n      \"name\": \"Merge\",\n      \"alwaysOutputData\": true\n    },\n    {\n      \"parameters\": {\n        \"content\": \"Limpieza de data\\n\\n- Revisa la información de las facturas y asigna los cenros de costos correspondientes para determinar si esta parametrizado o debe hacerse una asignación manual.\",\n        \"height\": 660,\n        \"width\": 760,\n        \"color\": 7\n      },\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"typeVersion\": 1,\n      \"position\": [\n        300,\n        160\n      ],\n      \"id\": \"eb7ab931-37e4-4c75-aade-ce2a80f994b2\",\n      \"name\": \"Sticky Note\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Inicializamos el consecutivo del comprobante\\nlet comprobanteConsecutivo = 100;\\n\\n// Almacenamos el último ID de factura procesado\\nlet ultimoParentDocumentID = null;\\n\\n// Inicializamos los datos finales\\nconst finalData = [];\\n\\n// Procesamos cada factura\\nitems.forEach((item) => {\\n    const {\\n        ParentDocumentID,\\n        Invoice_uuid,\\n        InvoiceDescription,\\n        SenderParty_CompanyID,\\n        ReceiverParty_CompanyID,\\n        Centers,\\n        ...cuentasContables\\n    } = item.json;\\n\\n    // Validación de ParentDocumentID\\n    if (!ParentDocumentID) {\\n        throw new Error(`❌ La factura con ID '${Invoice_uuid || \\\"undefined\\\"}' tiene el campo 'ParentDocumentID' vacío o no definido.`);\\n    }\\n\\n    // Incrementamos el consecutivo solo si el ParentDocumentID cambia\\n    if (ParentDocumentID !== ultimoParentDocumentID) {\\n        comprobanteConsecutivo += 1;\\n        ultimoParentDocumentID = ParentDocumentID;\\n    }\\n\\n    // Validamos Centros de Costos: Si no existen, se asigna un centro de costo por defecto\\n    const centrosValidos = Centers && Array.isArray(Centers) && Centers.length > 0 ? Centers : [\\n        {\\n            Code: \\\"0\\\", // Código de centro de costo por defecto\\n            Name: \\\"Sin Centro\\\",\\n            SubName: \\\"Sin Subcentro\\\",\\n            Percentage: 100,\\n            Type: \\\"Manual\\\",\\n        },\\n    ];\\n\\n    // Detectar cuentas dinámicamente manteniendo su formato\\n    const cuentas = Object.keys(cuentasContables)\\n        .filter(key => key.startsWith(\\\"AccountNum\\\") && key.endsWith(\\\"_Val\\\") && cuentasContables[key] !== null)\\n        .map(key => {\\n            const baseKey = key.replace(\\\"_Val\\\", \\\"\\\");\\n            return {\\n                codigo: cuentasContables[baseKey],\\n                descripcion: cuentasContables[`${baseKey}_Des`] || null,\\n                valor: parseFloat(cuentasContables[key]) || 0,\\n                tipo: cuentasContables[`${baseKey}_Deb_Cred`] === \\\"Credit\\\" ? \\\"Credito\\\" : \\\"Debito\\\"\\n            };\\n        });\\n\\n    // Procesamos cada centro de costo para generar las cuentas de gastos/costos\\n    centrosValidos.forEach((center) => {\\n        const { Code, Percentage } = center;\\n\\n        cuentas.forEach(({ codigo, descripcion, tipo, valor }) => {\\n            if (codigo && typeof codigo === \\\"number\\\") {\\n                finalData.push({\\n                    TipoDeComprobante: \\\"P\\\",\\n                    ConsecutivoComprobante: comprobanteConsecutivo,\\n                    FechaElaboracion: new Date().toLocaleDateString(\\\"es-CO\\\"), // Fecha actual\\n                    SiglaMoneda: \\\"\\\",\\n                    TasaCambio: \\\"\\\",\\n                    CodigoCuentaContable: codigo,\\n                    IdentificacionTercero: SenderParty_CompanyID,\\n                    Sucursal: \\\"\\\",\\n                    CodigoProducto: \\\"\\\",\\n                    CodigoDeBodega: \\\"\\\",\\n                    Accion: \\\"\\\",\\n                    CantidadProducto: \\\"\\\",\\n                    Prefijo: \\\"\\\",\\n                    Consecutivo: \\\"\\\",\\n                    NumeroCuota: \\\"\\\",\\n                    FechaVencimiento: \\\"\\\",\\n                    CodigoImpuesto: \\\"\\\",\\n                    CodigoGrupoActivoFijo: \\\"\\\",\\n                    CodigoActivoFijo: \\\"\\\",\\n                    Descripcion: `${ParentDocumentID} ${InvoiceDescription || \\\"\\\"}`.trim(),\\n                    CodigoCentroSubcentroDeCostos: Code || \\\"0\\\",\\n                    Debito: tipo === 'Debito' ? ((valor * Percentage) / 100).toFixed(2).replace('.', ',') : \\\"0\\\",\\n                    Credito: tipo === 'Credito' ? ((valor * Percentage) / 100).toFixed(2).replace('.', ',') : \\\"0\\\",\\n                    Observaciones: `${ParentDocumentID} ${InvoiceDescription || \\\"\\\"}`.trim(),\\n                    BaseGravableLibroComprasVentas: \\\"\\\",\\n                    BaseExentaLibroComprasVentas: \\\"\\\",\\n                    MesDeCierre: \\\"\\\",\\n                });\\n            }\\n        });\\n    });\\n});\\n\\n// Devolvemos los datos finales\\nreturn finalData.map((data) => ({ json: data }));\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        1360,\n        300\n      ],\n      \"id\": \"f62c6cac-f416-438f-9ac7-1f01a6a72e1f\",\n      \"name\": \"Distribución\"\n    },\n    {\n      \"parameters\": {\n        \"operation\": \"xlsx\",\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.convertToFile\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        1540,\n        300\n      ],\n      \"id\": \"592be5dc-a4a8-456c-8aa4-cdfff1826359\",\n      \"name\": \"Convert to File\"\n    },\n    {\n      \"parameters\": {\n        \"fileName\": \"Validacion_Facturas.xlsx\",\n        \"parentId\": \"01PHCLF5BRGX63ADJKEZDJKLVNEIWNENWF\",\n        \"binaryData\": true\n      },\n      \"type\": \"n8n-nodes-base.microsoftOneDrive\",\n      \"typeVersion\": 1,\n      \"position\": [\n        1720,\n        300\n      ],\n      \"id\": \"fb347628-8805-4139-9893-75798a46dc27\",\n      \"name\": \"Microsoft OneDrive\",\n      \"credentials\": {\n        \"microsoftOneDriveOAuth2Api\": {\n          \"id\": \"VuffFQLziQK9I5pc\",\n          \"name\": \"Microsoft Drive account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {},\n      \"type\": \"n8n-nodes-base.manualTrigger\",\n      \"typeVersion\": 1,\n      \"position\": [\n        360,\n        460\n      ],\n      \"id\": \"5167023c-caa4-4748-898b-f0bbb5b820b3\",\n      \"name\": \"When clicking ‘Test workflow’\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Obtener datos de los nodos anteriores\\nconst accountingRecords = $items('Data_AccountingRecords').map(item => item.json) || [];\\nconst paramCC = $items('Data_ParamCC').map(item => item.json) || [];\\n\\n// Validar datos clave de entrada\\nif (accountingRecords.length === 0) {\\n    throw new Error(\\\"❌ No se encontraron datos en el nodo Data_AccountingRecords.\\\");\\n}\\nif (paramCC.length === 0) {\\n    throw new Error(\\\"❌ No se encontraron datos en el nodo Data_ParamCC.\\\");\\n}\\n\\n// Fusionar datos usando SenderParty_CompanyID como clave común\\nconst mergedData = [];\\n\\naccountingRecords.forEach(record => {\\n    const matchingParam = paramCC.find(cc => cc.SenderParty_CompanyID === record.SenderParty_CompanyID);\\n\\n    const cuentas = Object.keys(record)\\n        .filter(key => key.startsWith(\\\"AccountNum\\\") && record[key] !== null)\\n        .reduce((acc, key) => {\\n            acc[key] = record[key];\\n            return acc;\\n        }, {});\\n\\n    if (matchingParam) {\\n        mergedData.push({\\n            // Información de la factura\\n            ParentDocumentID: record.ParentDocumentID || null,\\n            Invoice_uuid: record.Invoice_uuid || null,\\n            PayableAmount: parseFloat(record.PayableAmount) || 0,\\n            InvoiceDescription: record.InvoiceDescription || null,\\n            ExpenseType: record.ExpenseType || null,\\n            IVA: parseFloat(record.IVA) || 0,\\n            ReteFuente: parseFloat(record.ReteFuente) || 0,\\n            ReteICA: parseFloat(record.ReteICA) || 0,\\n            TaxInclusiveAmount: parseFloat(record.TaxInclusiveAmount) || 0,\\n            SenderParty_CompanyID: record.SenderParty_CompanyID,\\n            ReceiverParty_CompanyID: record.ReceiverParty_CompanyID,\\n            type: matchingParam.Tipo || \\\"Manual\\\",\\n            \\n            // Cuentas contables en su formato original\\n            ...cuentas,\\n\\n            // Distribución en centros de costos\\n            Centers: Array.from({ length: 12 }, (_, i) => {\\n                const index = i + 1;\\n                const code = matchingParam[`COD_CC_${index}`];\\n                const name = matchingParam[`NOMBRE_CC_${index}`];\\n                const subName = matchingParam[`NOMBRE_SUBCC_${index}`];\\n                const percentage = matchingParam[`%_CC_${index}`];\\n\\n                return code && percentage\\n                    ? {\\n                          Code: code.trim(),\\n                          Name: name?.trim() || null,\\n                          SubName: subName?.trim() || null,\\n                          Percentage: parseFloat(percentage.replace('%', '').trim()) || 0,\\n                          Type: \\\"Parametrizado\\\"\\n                      }\\n                    : null;\\n            }).filter(center => center !== null)\\n        });\\n    } else {\\n        // Caso donde no hay coincidencia de centros de costos, marcamos manual\\n        mergedData.push({\\n            ParentDocumentID: record.ParentDocumentID || null,\\n            Invoice_uuid: record.Invoice_uuid || null,\\n            PayableAmount: parseFloat(record.PayableAmount) || 0,\\n            InvoiceDescription: record.InvoiceDescription || null,\\n            ExpenseType: record.ExpenseType || null,\\n            IVA: parseFloat(record.IVA) || 0,\\n            ReteFuente: parseFloat(record.ReteFuente) || 0,\\n            ReteICA: parseFloat(record.ReteICA) || 0,\\n            TaxInclusiveAmount: parseFloat(record.TaxInclusiveAmount) || 0,\\n            SenderParty_CompanyID: record.SenderParty_CompanyID,\\n            ReceiverParty_CompanyID: record.ReceiverParty_CompanyID,\\n            type: \\\"Manual\\\", // Manual si no hay coincidencias\\n            \\n            // Cuentas contables en su formato original\\n            ...cuentas,\\n            \\n            Centers: []\\n        });\\n    }\\n});\\n\\n// Devolver datos fusionados\\nreturn mergedData.map(data => ({ json: data }));\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        920,\n        300\n      ],\n      \"id\": \"cafe39a3-d572-447b-9e60-b117dff33c61\",\n      \"name\": \"Depuración\"\n    },\n    {\n      \"parameters\": {\n        \"jsCode\": \"// Registrar detalles de facturas que no pasaron la validación\\nconst invoiceDetails = $json.Invoice_uuid || \\\"No UUID disponible\\\";\\nconst errorReason = $json.Centers?.length > 0 \\n  ? \\\"Centros de costos no parametrizados correctamente.\\\" \\n  : \\\"Centros de costos vacíos.\\\";\\n\\nreturn [\\n  {\\n    json: {\\n      Invoice_uuid: invoiceDetails,\\n      ErrorReason: errorReason,\\n      AdditionalInfo: $json\\n    }\\n  }\\n];\\n\"\n      },\n      \"type\": \"n8n-nodes-base.code\",\n      \"typeVersion\": 2,\n      \"position\": [\n        1360,\n        480\n      ],\n      \"id\": \"4d3a1720-9f7c-456c-b29e-24325cd9647b\",\n      \"name\": \"Code\"\n    },\n    {\n      \"parameters\": {\n        \"rules\": {\n          \"values\": [\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"SiigoPyme\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\"\n                    },\n                    \"id\": \"215e87df-918b-45d6-a700-e778107f7890\"\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"id\": \"2e450691-ad5a-49d0-9699-f804249db7cc\",\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"SiigoNube\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\",\n                      \"name\": \"filter.operator.equals\"\n                    }\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"id\": \"8165662d-2f7a-41d4-a4c9-0efdeae0851a\",\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"WorldOffice\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\",\n                      \"name\": \"filter.operator.equals\"\n                    }\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"id\": \"e12532d5-63ac-4a3e-990f-fd40660a365d\",\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"Aliaddo\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\",\n                      \"name\": \"filter.operator.equals\"\n                    }\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            },\n            {\n              \"conditions\": {\n                \"options\": {\n                  \"caseSensitive\": true,\n                  \"leftValue\": \"\",\n                  \"typeValidation\": \"strict\",\n                  \"version\": 2\n                },\n                \"conditions\": [\n                  {\n                    \"id\": \"e448f742-dec6-4a41-8f71-a2e7f64c9c31\",\n                    \"leftValue\": \"\",\n                    \"rightValue\": \"Alegra\",\n                    \"operator\": {\n                      \"type\": \"string\",\n                      \"operation\": \"equals\",\n                      \"name\": \"filter.operator.equals\"\n                    }\n                  }\n                ],\n                \"combinator\": \"and\"\n              }\n            }\n          ]\n        },\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.switch\",\n      \"typeVersion\": 3.2,\n      \"position\": [\n        1360,\n        60\n      ],\n      \"id\": \"e1b04f82-b2df-48ba-ba66-9d09f19af334\",\n      \"name\": \"Switch\"\n    }\n  ],\n  \"connections\": {\n    \"If\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Distribución\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Switch\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ],\n        [\n          {\n            \"node\": \"Code\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Data_AccountingRecords\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Data_ParamCC\",\n            \"type\": \"main\",\n            \"index\": 0\n          },\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Data_ParamCC\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Merge\",\n            \"type\": \"main\",\n            \"index\": 1\n          }\n        ]\n      ]\n    },\n    \"Merge\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Depuración\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Distribución\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Convert to File\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Convert to File\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Microsoft OneDrive\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When clicking ‘Test workflow’\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Data_AccountingRecords\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Depuración\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"If\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Switch\": {\n      \"main\": [\n        []\n      ]\n    }\n  },\n  \"settings\": {\n    \"executionOrder\": \"v1\"\n  },\n  \"staticData\": null,\n  \"meta\": {\n    \"templateCredsSetupCompleted\": true\n  },\n  \"pinData\": {},\n  \"versionId\": \"9c2742f0-3deb-4688-ab26-5495115ff110\",\n  \"triggerCount\": 1,\n  \"tags\": [\n    {\n      \"createdAt\": \"2025-02-04T13:55:27.606Z\",\n      \"updatedAt\": \"2025-02-04T13:55:27.606Z\",\n      \"id\": \"sFbVSiMOCzwy8ZoJ\",\n      \"name\": \"Causacion\"\n    }\n  ]\n}"
}